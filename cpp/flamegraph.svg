<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="521"><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.38%)</title><rect x="0.0000%" y="309" width="0.3839%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="2"/><text x="0.2500%" y="319.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.38%)</title><rect x="0.0000%" y="293" width="0.3839%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="2"/><text x="0.2500%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.38%)</title><rect x="0.0000%" y="277" width="0.3839%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="2"/><text x="0.2500%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.1919%" y="261" width="0.1919%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="1"/><text x="0.4419%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="0.1919%" y="245" width="0.1919%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="1"/><text x="0.4419%" y="255.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.96%)</title><rect x="0.0000%" y="325" width="0.9597%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="335.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.3839%" y="309" width="0.5758%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="3"/><text x="0.6339%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.3839%" y="293" width="0.5758%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="3"/><text x="0.6339%" y="303.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.3839%" y="277" width="0.5758%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="3"/><text x="0.6339%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.3839%" y="261" width="0.5758%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="3"/><text x="0.6339%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.3839%" y="245" width="0.5758%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="3"/><text x="0.6339%" y="255.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.3839%" y="229" width="0.5758%" height="15" fill="rgb(240,193,28)" fg:x="2" fg:w="3"/><text x="0.6339%" y="239.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="0.3839%" y="213" width="0.5758%" height="15" fill="rgb(216,20,37)" fg:x="2" fg:w="3"/><text x="0.6339%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.7678%" y="197" width="0.1919%" height="15" fill="rgb(206,188,39)" fg:x="4" fg:w="1"/><text x="1.0178%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.7678%" y="181" width="0.1919%" height="15" fill="rgb(217,207,13)" fg:x="4" fg:w="1"/><text x="1.0178%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.7678%" y="165" width="0.1919%" height="15" fill="rgb(231,73,38)" fg:x="4" fg:w="1"/><text x="1.0178%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.7678%" y="149" width="0.1919%" height="15" fill="rgb(225,20,46)" fg:x="4" fg:w="1"/><text x="1.0178%" y="159.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 1.15%)</title><rect x="0.0000%" y="341" width="1.1516%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="6"/><text x="0.2500%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="325" width="0.1919%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="1"/><text x="1.2097%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="309" width="0.1919%" height="15" fill="rgb(226,26,5)" fg:x="5" fg:w="1"/><text x="1.2097%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="293" width="0.1919%" height="15" fill="rgb(249,33,26)" fg:x="5" fg:w="1"/><text x="1.2097%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="277" width="0.1919%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="1"/><text x="1.2097%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="261" width="0.1919%" height="15" fill="rgb(221,5,38)" fg:x="5" fg:w="1"/><text x="1.2097%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="245" width="0.1919%" height="15" fill="rgb(247,18,42)" fg:x="5" fg:w="1"/><text x="1.2097%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="229" width="0.1919%" height="15" fill="rgb(241,131,45)" fg:x="5" fg:w="1"/><text x="1.2097%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="0.9597%" y="213" width="0.1919%" height="15" fill="rgb(249,31,29)" fg:x="5" fg:w="1"/><text x="1.2097%" y="223.50"></text></g><g><title>[libc.so.6] (2 samples, 0.38%)</title><rect x="1.3436%" y="309" width="0.3839%" height="15" fill="rgb(225,111,53)" fg:x="7" fg:w="2"/><text x="1.5936%" y="319.50"></text></g><g><title>snprintf (2 samples, 0.38%)</title><rect x="1.3436%" y="293" width="0.3839%" height="15" fill="rgb(238,160,17)" fg:x="7" fg:w="2"/><text x="1.5936%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.38%)</title><rect x="1.3436%" y="277" width="0.3839%" height="15" fill="rgb(214,148,48)" fg:x="7" fg:w="2"/><text x="1.5936%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.38%)</title><rect x="1.3436%" y="261" width="0.3839%" height="15" fill="rgb(232,36,49)" fg:x="7" fg:w="2"/><text x="1.5936%" y="271.50"></text></g><g><title>[libc.so.6] (2 samples, 0.38%)</title><rect x="1.3436%" y="245" width="0.3839%" height="15" fill="rgb(209,103,24)" fg:x="7" fg:w="2"/><text x="1.5936%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="1.5355%" y="229" width="0.1919%" height="15" fill="rgb(229,88,8)" fg:x="8" fg:w="1"/><text x="1.7855%" y="239.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="1.7274%" y="293" width="0.1919%" height="15" fill="rgb(213,181,19)" fg:x="9" fg:w="1"/><text x="1.9774%" y="303.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="1.7274%" y="277" width="0.1919%" height="15" fill="rgb(254,191,54)" fg:x="9" fg:w="1"/><text x="1.9774%" y="287.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="1.7274%" y="261" width="0.1919%" height="15" fill="rgb(241,83,37)" fg:x="9" fg:w="1"/><text x="1.9774%" y="271.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="1.7274%" y="245" width="0.1919%" height="15" fill="rgb(233,36,39)" fg:x="9" fg:w="1"/><text x="1.9774%" y="255.50"></text></g><g><title>clock_gettime (1 samples, 0.19%)</title><rect x="1.9194%" y="261" width="0.1919%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="1"/><text x="2.1694%" y="271.50"></text></g><g><title>__vdso_clock_gettime (1 samples, 0.19%)</title><rect x="1.9194%" y="245" width="0.1919%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="1"/><text x="2.1694%" y="255.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="2.1113%" y="261" width="0.1919%" height="15" fill="rgb(238,167,29)" fg:x="11" fg:w="1"/><text x="2.3613%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="2.1113%" y="245" width="0.1919%" height="15" fill="rgb(232,182,51)" fg:x="11" fg:w="1"/><text x="2.3613%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="2.1113%" y="229" width="0.1919%" height="15" fill="rgb(231,60,39)" fg:x="11" fg:w="1"/><text x="2.3613%" y="239.50"></text></g><g><title>[libcuda.so.555.58.02] (3 samples, 0.58%)</title><rect x="1.9194%" y="293" width="0.5758%" height="15" fill="rgb(208,69,12)" fg:x="10" fg:w="3"/><text x="2.1694%" y="303.50"></text></g><g><title>[libcuda.so.555.58.02] (3 samples, 0.58%)</title><rect x="1.9194%" y="277" width="0.5758%" height="15" fill="rgb(235,93,37)" fg:x="10" fg:w="3"/><text x="2.1694%" y="287.50"></text></g><g><title>read (1 samples, 0.19%)</title><rect x="2.3033%" y="261" width="0.1919%" height="15" fill="rgb(213,116,39)" fg:x="12" fg:w="1"/><text x="2.5533%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="2.3033%" y="245" width="0.1919%" height="15" fill="rgb(222,207,29)" fg:x="12" fg:w="1"/><text x="2.5533%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="2.3033%" y="229" width="0.1919%" height="15" fill="rgb(206,96,30)" fg:x="12" fg:w="1"/><text x="2.5533%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="2.3033%" y="213" width="0.1919%" height="15" fill="rgb(218,138,4)" fg:x="12" fg:w="1"/><text x="2.5533%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="2.3033%" y="197" width="0.1919%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="2.5533%" y="207.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.19%)</title><rect x="2.4952%" y="293" width="0.1919%" height="15" fill="rgb(239,60,40)" fg:x="13" fg:w="1"/><text x="2.7452%" y="303.50"></text></g><g><title>[libcuda.so.555.58.02] (6 samples, 1.15%)</title><rect x="1.7274%" y="309" width="1.1516%" height="15" fill="rgb(206,27,48)" fg:x="9" fg:w="6"/><text x="1.9774%" y="319.50"></text></g><g><title>syscall (1 samples, 0.19%)</title><rect x="2.6871%" y="293" width="0.1919%" height="15" fill="rgb(225,35,8)" fg:x="14" fg:w="1"/><text x="2.9371%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="2.6871%" y="277" width="0.1919%" height="15" fill="rgb(250,213,24)" fg:x="14" fg:w="1"/><text x="2.9371%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="2.6871%" y="261" width="0.1919%" height="15" fill="rgb(247,123,22)" fg:x="14" fg:w="1"/><text x="2.9371%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="2.6871%" y="245" width="0.1919%" height="15" fill="rgb(231,138,38)" fg:x="14" fg:w="1"/><text x="2.9371%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.38%)</title><rect x="2.8791%" y="309" width="0.3839%" height="15" fill="rgb(231,145,46)" fg:x="15" fg:w="2"/><text x="3.1291%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="3.0710%" y="293" width="0.1919%" height="15" fill="rgb(251,118,11)" fg:x="16" fg:w="1"/><text x="3.3210%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="3.0710%" y="277" width="0.1919%" height="15" fill="rgb(217,147,25)" fg:x="16" fg:w="1"/><text x="3.3210%" y="287.50"></text></g><g><title>[libc.so.6] (12 samples, 2.30%)</title><rect x="1.1516%" y="341" width="2.3033%" height="15" fill="rgb(247,81,37)" fg:x="6" fg:w="12"/><text x="1.4016%" y="351.50">[..</text></g><g><title>[libc.so.6] (12 samples, 2.30%)</title><rect x="1.1516%" y="325" width="2.3033%" height="15" fill="rgb(209,12,38)" fg:x="6" fg:w="12"/><text x="1.4016%" y="335.50">[..</text></g><g><title>__sigsetjmp (1 samples, 0.19%)</title><rect x="3.2630%" y="309" width="0.1919%" height="15" fill="rgb(227,1,9)" fg:x="17" fg:w="1"/><text x="3.5130%" y="319.50"></text></g><g><title>[unknown] (3 samples, 0.58%)</title><rect x="3.4549%" y="341" width="0.5758%" height="15" fill="rgb(248,47,43)" fg:x="18" fg:w="3"/><text x="3.7049%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.38%)</title><rect x="3.6468%" y="325" width="0.3839%" height="15" fill="rgb(221,10,30)" fg:x="19" fg:w="2"/><text x="3.8968%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="3.8388%" y="309" width="0.1919%" height="15" fill="rgb(210,229,1)" fg:x="20" fg:w="1"/><text x="4.0888%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="3.8388%" y="293" width="0.1919%" height="15" fill="rgb(222,148,37)" fg:x="20" fg:w="1"/><text x="4.0888%" y="303.50"></text></g><g><title>_Init_MKL_Loader (1 samples, 0.19%)</title><rect x="4.0307%" y="341" width="0.1919%" height="15" fill="rgb(234,67,33)" fg:x="21" fg:w="1"/><text x="4.2807%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="4.0307%" y="325" width="0.1919%" height="15" fill="rgb(247,98,35)" fg:x="21" fg:w="1"/><text x="4.2807%" y="335.50"></text></g><g><title>_start (4 samples, 0.77%)</title><rect x="4.2226%" y="341" width="0.7678%" height="15" fill="rgb(247,138,52)" fg:x="22" fg:w="4"/><text x="4.4726%" y="351.50"></text></g><g><title>__libc_start_main (4 samples, 0.77%)</title><rect x="4.2226%" y="325" width="0.7678%" height="15" fill="rgb(213,79,30)" fg:x="22" fg:w="4"/><text x="4.4726%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.77%)</title><rect x="4.2226%" y="309" width="0.7678%" height="15" fill="rgb(246,177,23)" fg:x="22" fg:w="4"/><text x="4.4726%" y="319.50"></text></g><g><title>main (4 samples, 0.77%)</title><rect x="4.2226%" y="293" width="0.7678%" height="15" fill="rgb(230,62,27)" fg:x="22" fg:w="4"/><text x="4.4726%" y="303.50"></text></g><g><title>minimax (4 samples, 0.77%)</title><rect x="4.2226%" y="277" width="0.7678%" height="15" fill="rgb(216,154,8)" fg:x="22" fg:w="4"/><text x="4.4726%" y="287.50"></text></g><g><title>minimax_internal (4 samples, 0.77%)</title><rect x="4.2226%" y="261" width="0.7678%" height="15" fill="rgb(244,35,45)" fg:x="22" fg:w="4"/><text x="4.4726%" y="271.50"></text></g><g><title>minimax_internal (4 samples, 0.77%)</title><rect x="4.2226%" y="245" width="0.7678%" height="15" fill="rgb(251,115,12)" fg:x="22" fg:w="4"/><text x="4.4726%" y="255.50"></text></g><g><title>minimax_internal (4 samples, 0.77%)</title><rect x="4.2226%" y="229" width="0.7678%" height="15" fill="rgb(240,54,50)" fg:x="22" fg:w="4"/><text x="4.4726%" y="239.50"></text></g><g><title>minimax_internal (4 samples, 0.77%)</title><rect x="4.2226%" y="213" width="0.7678%" height="15" fill="rgb(233,84,52)" fg:x="22" fg:w="4"/><text x="4.4726%" y="223.50"></text></g><g><title>at::(anonymous namespace)::check_type (1 samples, 0.19%)</title><rect x="4.9904%" y="341" width="0.1919%" height="15" fill="rgb(207,117,47)" fg:x="26" fg:w="1"/><text x="5.2404%" y="351.50"></text></g><g><title>at::(anonymous namespace)::structured_sigmoid_out_functional::set_output_raw_strided (1 samples, 0.19%)</title><rect x="5.1823%" y="341" width="0.1919%" height="15" fill="rgb(249,43,39)" fg:x="27" fg:w="1"/><text x="5.4323%" y="351.50"></text></g><g><title>at::(anonymous namespace)::wrapper_CPU_addmm (1 samples, 0.19%)</title><rect x="5.3743%" y="341" width="0.1919%" height="15" fill="rgb(209,38,44)" fg:x="28" fg:w="1"/><text x="5.6243%" y="351.50"></text></g><g><title>at::Context::deterministicAlgorithms (1 samples, 0.19%)</title><rect x="5.5662%" y="341" width="0.1919%" height="15" fill="rgb(236,212,23)" fg:x="29" fg:w="1"/><text x="5.8162%" y="351.50"></text></g><g><title>at::NamesMode::is_enabled (2 samples, 0.38%)</title><rect x="5.7582%" y="341" width="0.3839%" height="15" fill="rgb(242,79,21)" fg:x="30" fg:w="2"/><text x="6.0082%" y="351.50"></text></g><g><title>__tls_get_addr (1 samples, 0.19%)</title><rect x="5.9501%" y="325" width="0.1919%" height="15" fill="rgb(211,96,35)" fg:x="31" fg:w="1"/><text x="6.2001%" y="335.50"></text></g><g><title>at::NamesMode::set_enabled (2 samples, 0.38%)</title><rect x="6.1420%" y="341" width="0.3839%" height="15" fill="rgb(253,215,40)" fg:x="32" fg:w="2"/><text x="6.3920%" y="351.50"></text></g><g><title>__tls_get_addr (1 samples, 0.19%)</title><rect x="6.3340%" y="325" width="0.1919%" height="15" fill="rgb(211,81,21)" fg:x="33" fg:w="1"/><text x="6.5840%" y="335.50"></text></g><g><title>at::OperandInfo::tensor (2 samples, 0.38%)</title><rect x="6.5259%" y="341" width="0.3839%" height="15" fill="rgb(208,190,38)" fg:x="34" fg:w="2"/><text x="6.7759%" y="351.50"></text></g><g><title>at::Tensor at::detail::make_tensor&lt;c10::TensorImpl, c10::TensorImpl::ImplType, c10::Storage, c10::DispatchKeySet, caffe2::TypeMeta&gt; (3 samples, 0.58%)</title><rect x="6.9098%" y="341" width="0.5758%" height="15" fill="rgb(235,213,38)" fg:x="36" fg:w="3"/><text x="7.1598%" y="351.50"></text></g><g><title>operator new (3 samples, 0.58%)</title><rect x="6.9098%" y="325" width="0.5758%" height="15" fill="rgb(237,122,38)" fg:x="36" fg:w="3"/><text x="7.1598%" y="335.50"></text></g><g><title>malloc (3 samples, 0.58%)</title><rect x="6.9098%" y="309" width="0.5758%" height="15" fill="rgb(244,218,35)" fg:x="36" fg:w="3"/><text x="7.1598%" y="319.50"></text></g><g><title>at::Tensor at::native::alias_with_sizes_and_strides&lt;c10::SmallVector&lt;long, 5u&gt; &gt; (1 samples, 0.19%)</title><rect x="7.4856%" y="341" width="0.1919%" height="15" fill="rgb(240,68,47)" fg:x="39" fg:w="1"/><text x="7.7356%" y="351.50"></text></g><g><title>at::Tensor::as_strided_symint (1 samples, 0.19%)</title><rect x="7.6775%" y="341" width="0.1919%" height="15" fill="rgb(210,16,53)" fg:x="40" fg:w="1"/><text x="7.9275%" y="351.50"></text></g><g><title>at::TensorBase at::detail::_empty_generic&lt;long&gt; (2 samples, 0.38%)</title><rect x="7.8695%" y="341" width="0.3839%" height="15" fill="rgb(235,124,12)" fg:x="41" fg:w="2"/><text x="8.1195%" y="351.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="8.2534%" y="149" width="0.3839%" height="15" fill="rgb(224,169,11)" fg:x="43" fg:w="2"/><text x="8.5034%" y="159.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="8.2534%" y="133" width="0.3839%" height="15" fill="rgb(250,166,2)" fg:x="43" fg:w="2"/><text x="8.5034%" y="143.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="8.2534%" y="117" width="0.3839%" height="15" fill="rgb(242,216,29)" fg:x="43" fg:w="2"/><text x="8.5034%" y="127.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="8.2534%" y="101" width="0.3839%" height="15" fill="rgb(230,116,27)" fg:x="43" fg:w="2"/><text x="8.5034%" y="111.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="8.2534%" y="85" width="0.3839%" height="15" fill="rgb(228,99,48)" fg:x="43" fg:w="2"/><text x="8.5034%" y="95.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="8.2534%" y="69" width="0.3839%" height="15" fill="rgb(253,11,6)" fg:x="43" fg:w="2"/><text x="8.5034%" y="79.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="8.2534%" y="53" width="0.3839%" height="15" fill="rgb(247,143,39)" fg:x="43" fg:w="2"/><text x="8.5034%" y="63.50"></text></g><g><title>[libcuda.so.555.58.02] (1 samples, 0.19%)</title><rect x="8.4453%" y="37" width="0.1919%" height="15" fill="rgb(236,97,10)" fg:x="44" fg:w="1"/><text x="8.6953%" y="47.50"></text></g><g><title>at::TensorBase at::detail::_empty_strided_generic&lt;c10::ArrayRef&lt;long&gt; &gt; (3 samples, 0.58%)</title><rect x="8.2534%" y="341" width="0.5758%" height="15" fill="rgb(233,208,19)" fg:x="43" fg:w="3"/><text x="8.5034%" y="351.50"></text></g><g><title>c10::cuda::CUDACachingAllocator::Native::NativeCachingAllocator::allocate (3 samples, 0.58%)</title><rect x="8.2534%" y="325" width="0.5758%" height="15" fill="rgb(216,164,2)" fg:x="43" fg:w="3"/><text x="8.5034%" y="335.50"></text></g><g><title>c10::cuda::getCurrentCUDAStream (3 samples, 0.58%)</title><rect x="8.2534%" y="309" width="0.5758%" height="15" fill="rgb(220,129,5)" fg:x="43" fg:w="3"/><text x="8.5034%" y="319.50"></text></g><g><title>c10::cuda::(anonymous namespace)::initCUDAStreamsOnce (3 samples, 0.58%)</title><rect x="8.2534%" y="293" width="0.5758%" height="15" fill="rgb(242,17,10)" fg:x="43" fg:w="3"/><text x="8.5034%" y="303.50"></text></g><g><title>c10::cuda::(anonymous namespace)::initGlobalStreamState (3 samples, 0.58%)</title><rect x="8.2534%" y="277" width="0.5758%" height="15" fill="rgb(242,107,0)" fg:x="43" fg:w="3"/><text x="8.5034%" y="287.50"></text></g><g><title>cudaDeviceGetStreamPriorityRange (3 samples, 0.58%)</title><rect x="8.2534%" y="261" width="0.5758%" height="15" fill="rgb(251,28,31)" fg:x="43" fg:w="3"/><text x="8.5034%" y="271.50"></text></g><g><title>[libcudart.so.12.5.82] (3 samples, 0.58%)</title><rect x="8.2534%" y="245" width="0.5758%" height="15" fill="rgb(233,223,10)" fg:x="43" fg:w="3"/><text x="8.5034%" y="255.50"></text></g><g><title>[libcudart.so.12.5.82] (3 samples, 0.58%)</title><rect x="8.2534%" y="229" width="0.5758%" height="15" fill="rgb(215,21,27)" fg:x="43" fg:w="3"/><text x="8.5034%" y="239.50"></text></g><g><title>[libcudart.so.12.5.82] (3 samples, 0.58%)</title><rect x="8.2534%" y="213" width="0.5758%" height="15" fill="rgb(232,23,21)" fg:x="43" fg:w="3"/><text x="8.5034%" y="223.50"></text></g><g><title>[libcudart.so.12.5.82] (3 samples, 0.58%)</title><rect x="8.2534%" y="197" width="0.5758%" height="15" fill="rgb(244,5,23)" fg:x="43" fg:w="3"/><text x="8.5034%" y="207.50"></text></g><g><title>[libcudart.so.12.5.82] (3 samples, 0.58%)</title><rect x="8.2534%" y="181" width="0.5758%" height="15" fill="rgb(226,81,46)" fg:x="43" fg:w="3"/><text x="8.5034%" y="191.50"></text></g><g><title>[libcudart.so.12.5.82] (3 samples, 0.58%)</title><rect x="8.2534%" y="165" width="0.5758%" height="15" fill="rgb(247,70,30)" fg:x="43" fg:w="3"/><text x="8.5034%" y="175.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="8.6372%" y="149" width="0.1919%" height="15" fill="rgb(212,68,19)" fg:x="45" fg:w="1"/><text x="8.8872%" y="159.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="8.6372%" y="133" width="0.1919%" height="15" fill="rgb(240,187,13)" fg:x="45" fg:w="1"/><text x="8.8872%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="8.6372%" y="117" width="0.1919%" height="15" fill="rgb(223,113,26)" fg:x="45" fg:w="1"/><text x="8.8872%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="8.6372%" y="101" width="0.1919%" height="15" fill="rgb(206,192,2)" fg:x="45" fg:w="1"/><text x="8.8872%" y="111.50"></text></g><g><title>at::TensorBase at::detail::make_tensor_base&lt;c10::TensorImpl, c10::intrusive_ptr&lt;c10::StorageImpl, c10::detail::intrusive_target_default_null_type&lt;c10::StorageImpl&gt; &gt;, c10::DispatchKeySet&amp;, caffe2::TypeMeta&amp;&gt; (2 samples, 0.38%)</title><rect x="8.8292%" y="341" width="0.3839%" height="15" fill="rgb(241,108,4)" fg:x="46" fg:w="2"/><text x="9.0792%" y="351.50"></text></g><g><title>at::TensorBase::sizes (1 samples, 0.19%)</title><rect x="9.2131%" y="341" width="0.1919%" height="15" fill="rgb(247,173,49)" fg:x="48" fg:w="1"/><text x="9.4631%" y="351.50"></text></g><g><title>at::TensorBase::strides (1 samples, 0.19%)</title><rect x="9.4050%" y="341" width="0.1919%" height="15" fill="rgb(224,114,35)" fg:x="49" fg:w="1"/><text x="9.6550%" y="351.50"></text></g><g><title>at::TensorIteratorBase::build (1 samples, 0.19%)</title><rect x="9.5969%" y="341" width="0.1919%" height="15" fill="rgb(245,159,27)" fg:x="50" fg:w="1"/><text x="9.8469%" y="351.50"></text></g><g><title>at::TensorIteratorBase::build_unary_op (1 samples, 0.19%)</title><rect x="9.7889%" y="341" width="0.1919%" height="15" fill="rgb(245,172,44)" fg:x="51" fg:w="1"/><text x="10.0389%" y="351.50"></text></g><g><title>at::TensorIteratorBase::compute_fast_setup_type (1 samples, 0.19%)</title><rect x="9.9808%" y="341" width="0.1919%" height="15" fill="rgb(236,23,11)" fg:x="52" fg:w="1"/><text x="10.2308%" y="351.50"></text></g><g><title>at::TensorIteratorBase::compute_names (1 samples, 0.19%)</title><rect x="10.1727%" y="341" width="0.1919%" height="15" fill="rgb(205,117,38)" fg:x="53" fg:w="1"/><text x="10.4227%" y="351.50"></text></g><g><title>at::TensorIteratorBase::compute_shape (3 samples, 0.58%)</title><rect x="10.3647%" y="341" width="0.5758%" height="15" fill="rgb(237,72,25)" fg:x="54" fg:w="3"/><text x="10.6147%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="10.7486%" y="325" width="0.1919%" height="15" fill="rgb(244,70,9)" fg:x="56" fg:w="1"/><text x="10.9986%" y="335.50"></text></g><g><title>at::TensorIteratorBase::compute_types (4 samples, 0.77%)</title><rect x="10.9405%" y="341" width="0.7678%" height="15" fill="rgb(217,125,39)" fg:x="57" fg:w="4"/><text x="11.1905%" y="351.50"></text></g><g><title>at::TensorIteratorBase::fast_set_up (6 samples, 1.15%)</title><rect x="11.7083%" y="341" width="1.1516%" height="15" fill="rgb(235,36,10)" fg:x="61" fg:w="6"/><text x="11.9583%" y="351.50"></text></g><g><title>at::TensorIteratorBase::mark_resize_outputs (2 samples, 0.38%)</title><rect x="12.8599%" y="341" width="0.3839%" height="15" fill="rgb(251,123,47)" fg:x="67" fg:w="2"/><text x="13.1099%" y="351.50"></text></g><g><title>at::TensorIteratorBase::populate_operands (3 samples, 0.58%)</title><rect x="13.2438%" y="341" width="0.5758%" height="15" fill="rgb(221,13,13)" fg:x="69" fg:w="3"/><text x="13.4938%" y="351.50"></text></g><g><title>at::TensorIteratorBase::serial_for_each (2 samples, 0.38%)</title><rect x="13.8196%" y="341" width="0.3839%" height="15" fill="rgb(238,131,9)" fg:x="72" fg:w="2"/><text x="14.0696%" y="351.50"></text></g><g><title>at::TensorIteratorBase::~TensorIteratorBase (1 samples, 0.19%)</title><rect x="14.2035%" y="341" width="0.1919%" height="15" fill="rgb(211,50,8)" fg:x="74" fg:w="1"/><text x="14.4535%" y="351.50"></text></g><g><title>at::TensorIteratorConfig::add_borrowed_const_input (1 samples, 0.19%)</title><rect x="14.3954%" y="341" width="0.1919%" height="15" fill="rgb(245,182,24)" fg:x="75" fg:w="1"/><text x="14.6454%" y="351.50"></text></g><g><title>at::TensorIteratorConfig::add_owned_output (1 samples, 0.19%)</title><rect x="14.5873%" y="341" width="0.1919%" height="15" fill="rgb(242,14,37)" fg:x="76" fg:w="1"/><text x="14.8373%" y="351.50"></text></g><g><title>at::TensorMaker::make_tensor (1 samples, 0.19%)</title><rect x="14.7793%" y="341" width="0.1919%" height="15" fill="rgb(246,228,12)" fg:x="77" fg:w="1"/><text x="15.0293%" y="351.50"></text></g><g><title>at::_ops::addmm::redispatch (1 samples, 0.19%)</title><rect x="14.9712%" y="341" width="0.1919%" height="15" fill="rgb(213,55,15)" fg:x="78" fg:w="1"/><text x="15.2212%" y="351.50"></text></g><g><title>at::_ops::as_strided::call (2 samples, 0.38%)</title><rect x="15.1631%" y="341" width="0.3839%" height="15" fill="rgb(209,9,3)" fg:x="79" fg:w="2"/><text x="15.4131%" y="351.50"></text></g><g><title>at::_ops::copy_::call (1 samples, 0.19%)</title><rect x="15.5470%" y="341" width="0.1919%" height="15" fill="rgb(230,59,30)" fg:x="81" fg:w="1"/><text x="15.7970%" y="351.50"></text></g><g><title>at::_ops::empty_strided::call (1 samples, 0.19%)</title><rect x="15.7390%" y="341" width="0.1919%" height="15" fill="rgb(209,121,21)" fg:x="82" fg:w="1"/><text x="15.9890%" y="351.50"></text></g><g><title>at::_ops::expand::call (2 samples, 0.38%)</title><rect x="15.9309%" y="341" width="0.3839%" height="15" fill="rgb(220,109,13)" fg:x="83" fg:w="2"/><text x="16.1809%" y="351.50"></text></g><g><title>at::_ops::item::call (1 samples, 0.19%)</title><rect x="16.3148%" y="341" width="0.1919%" height="15" fill="rgb(232,18,1)" fg:x="85" fg:w="1"/><text x="16.5648%" y="351.50"></text></g><g><title>at::_ops::leaky_relu::redispatch (2 samples, 0.38%)</title><rect x="16.5067%" y="341" width="0.3839%" height="15" fill="rgb(215,41,42)" fg:x="86" fg:w="2"/><text x="16.7567%" y="351.50"></text></g><g><title>at::_ops::sigmoid::redispatch (2 samples, 0.38%)</title><rect x="16.8906%" y="341" width="0.3839%" height="15" fill="rgb(224,123,36)" fg:x="88" fg:w="2"/><text x="17.1406%" y="351.50"></text></g><g><title>at::_ops::t::call (1 samples, 0.19%)</title><rect x="17.2745%" y="341" width="0.1919%" height="15" fill="rgb(240,125,3)" fg:x="90" fg:w="1"/><text x="17.5245%" y="351.50"></text></g><g><title>at::_ops::t::redispatch (1 samples, 0.19%)</title><rect x="17.4664%" y="341" width="0.1919%" height="15" fill="rgb(205,98,50)" fg:x="91" fg:w="1"/><text x="17.7164%" y="351.50"></text></g><g><title>at::_ops::to_dtype_layout::call (4 samples, 0.77%)</title><rect x="17.6583%" y="341" width="0.7678%" height="15" fill="rgb(205,185,37)" fg:x="92" fg:w="4"/><text x="17.9083%" y="351.50"></text></g><g><title>at::_ops::view::call (3 samples, 0.58%)</title><rect x="18.4261%" y="341" width="0.5758%" height="15" fill="rgb(238,207,15)" fg:x="96" fg:w="3"/><text x="18.6761%" y="351.50"></text></g><g><title>at::_ops::view::redispatch (2 samples, 0.38%)</title><rect x="19.0019%" y="341" width="0.3839%" height="15" fill="rgb(213,199,42)" fg:x="99" fg:w="2"/><text x="19.2519%" y="351.50"></text></g><g><title>at::autocast::is_enabled (1 samples, 0.19%)</title><rect x="19.3858%" y="341" width="0.1919%" height="15" fill="rgb(235,201,11)" fg:x="101" fg:w="1"/><text x="19.6358%" y="351.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="19.5777%" y="165" width="0.1919%" height="15" fill="rgb(207,46,11)" fg:x="102" fg:w="1"/><text x="19.8277%" y="175.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="19.5777%" y="149" width="0.1919%" height="15" fill="rgb(241,35,35)" fg:x="102" fg:w="1"/><text x="19.8277%" y="159.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="19.5777%" y="133" width="0.1919%" height="15" fill="rgb(243,32,47)" fg:x="102" fg:w="1"/><text x="19.8277%" y="143.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.19%)</title><rect x="19.5777%" y="117" width="0.1919%" height="15" fill="rgb(247,202,23)" fg:x="102" fg:w="1"/><text x="19.8277%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="19.9616%" y="101" width="0.1919%" height="15" fill="rgb(219,102,11)" fg:x="104" fg:w="1"/><text x="20.2116%" y="111.50"></text></g><g><title>[libcuda.so.555.58.02] (2 samples, 0.38%)</title><rect x="19.9616%" y="117" width="0.3839%" height="15" fill="rgb(243,110,44)" fg:x="104" fg:w="2"/><text x="20.2116%" y="127.50"></text></g><g><title>__libc_calloc (1 samples, 0.19%)</title><rect x="20.1536%" y="101" width="0.1919%" height="15" fill="rgb(222,74,54)" fg:x="105" fg:w="1"/><text x="20.4036%" y="111.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="20.1536%" y="85" width="0.1919%" height="15" fill="rgb(216,99,12)" fg:x="105" fg:w="1"/><text x="20.4036%" y="95.50"></text></g><g><title>at::cuda::detail::CUDAHooks::initCUDA (5 samples, 0.96%)</title><rect x="19.5777%" y="341" width="0.9597%" height="15" fill="rgb(226,22,26)" fg:x="102" fg:w="5"/><text x="19.8277%" y="351.50"></text></g><g><title>c10::cuda::device_count_ensure_non_zero (5 samples, 0.96%)</title><rect x="19.5777%" y="325" width="0.9597%" height="15" fill="rgb(217,163,10)" fg:x="102" fg:w="5"/><text x="19.8277%" y="335.50"></text></g><g><title>cudaGetDeviceCount (5 samples, 0.96%)</title><rect x="19.5777%" y="309" width="0.9597%" height="15" fill="rgb(213,25,53)" fg:x="102" fg:w="5"/><text x="19.8277%" y="319.50"></text></g><g><title>[libcudart.so.12.5.82] (5 samples, 0.96%)</title><rect x="19.5777%" y="293" width="0.9597%" height="15" fill="rgb(252,105,26)" fg:x="102" fg:w="5"/><text x="19.8277%" y="303.50"></text></g><g><title>[libcudart.so.12.5.82] (5 samples, 0.96%)</title><rect x="19.5777%" y="277" width="0.9597%" height="15" fill="rgb(220,39,43)" fg:x="102" fg:w="5"/><text x="19.8277%" y="287.50"></text></g><g><title>pthread_once (5 samples, 0.96%)</title><rect x="19.5777%" y="261" width="0.9597%" height="15" fill="rgb(229,68,48)" fg:x="102" fg:w="5"/><text x="19.8277%" y="271.50"></text></g><g><title>[libc.so.6] (5 samples, 0.96%)</title><rect x="19.5777%" y="245" width="0.9597%" height="15" fill="rgb(252,8,32)" fg:x="102" fg:w="5"/><text x="19.8277%" y="255.50"></text></g><g><title>[libcudart.so.12.5.82] (5 samples, 0.96%)</title><rect x="19.5777%" y="229" width="0.9597%" height="15" fill="rgb(223,20,43)" fg:x="102" fg:w="5"/><text x="19.8277%" y="239.50"></text></g><g><title>[libcudart.so.12.5.82] (5 samples, 0.96%)</title><rect x="19.5777%" y="213" width="0.9597%" height="15" fill="rgb(229,81,49)" fg:x="102" fg:w="5"/><text x="19.8277%" y="223.50"></text></g><g><title>[libcuda.so.555.58.02] (5 samples, 0.96%)</title><rect x="19.5777%" y="197" width="0.9597%" height="15" fill="rgb(236,28,36)" fg:x="102" fg:w="5"/><text x="19.8277%" y="207.50"></text></g><g><title>[libcuda.so.555.58.02] (5 samples, 0.96%)</title><rect x="19.5777%" y="181" width="0.9597%" height="15" fill="rgb(249,185,26)" fg:x="102" fg:w="5"/><text x="19.8277%" y="191.50"></text></g><g><title>[libcuda.so.555.58.02] (4 samples, 0.77%)</title><rect x="19.7697%" y="165" width="0.7678%" height="15" fill="rgb(249,174,33)" fg:x="103" fg:w="4"/><text x="20.0197%" y="175.50"></text></g><g><title>[libcuda.so.555.58.02] (4 samples, 0.77%)</title><rect x="19.7697%" y="149" width="0.7678%" height="15" fill="rgb(233,201,37)" fg:x="103" fg:w="4"/><text x="20.0197%" y="159.50"></text></g><g><title>[libcuda.so.555.58.02] (4 samples, 0.77%)</title><rect x="19.7697%" y="133" width="0.7678%" height="15" fill="rgb(221,78,26)" fg:x="103" fg:w="4"/><text x="20.0197%" y="143.50"></text></g><g><title>ioctl (1 samples, 0.19%)</title><rect x="20.3455%" y="117" width="0.1919%" height="15" fill="rgb(250,127,30)" fg:x="106" fg:w="1"/><text x="20.5955%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.19%)</title><rect x="20.3455%" y="101" width="0.1919%" height="15" fill="rgb(230,49,44)" fg:x="106" fg:w="1"/><text x="20.5955%" y="111.50"></text></g><g><title>at::detail::computeStride (1 samples, 0.19%)</title><rect x="20.5374%" y="341" width="0.1919%" height="15" fill="rgb(229,67,23)" fg:x="107" fg:w="1"/><text x="20.7874%" y="351.50"></text></g><g><title>at::detail::empty_cpu (2 samples, 0.38%)</title><rect x="20.7294%" y="341" width="0.3839%" height="15" fill="rgb(249,83,47)" fg:x="108" fg:w="2"/><text x="20.9794%" y="351.50"></text></g><g><title>at::detail::empty_strided_cpu (1 samples, 0.19%)</title><rect x="21.1132%" y="341" width="0.1919%" height="15" fill="rgb(215,43,3)" fg:x="110" fg:w="1"/><text x="21.3632%" y="351.50"></text></g><g><title>at::empty_strided (1 samples, 0.19%)</title><rect x="21.3052%" y="341" width="0.1919%" height="15" fill="rgb(238,154,13)" fg:x="111" fg:w="1"/><text x="21.5552%" y="351.50"></text></g><g><title>at::getStepCallbacks (1 samples, 0.19%)</title><rect x="21.4971%" y="341" width="0.1919%" height="15" fill="rgb(219,56,2)" fg:x="112" fg:w="1"/><text x="21.7471%" y="351.50"></text></g><g><title>__tls_get_addr (1 samples, 0.19%)</title><rect x="21.4971%" y="325" width="0.1919%" height="15" fill="rgb(233,0,4)" fg:x="112" fg:w="1"/><text x="21.7471%" y="335.50"></text></g><g><title>at::getStepCallbacksUnlessEmpty (5 samples, 0.96%)</title><rect x="21.6891%" y="341" width="0.9597%" height="15" fill="rgb(235,30,7)" fg:x="113" fg:w="5"/><text x="21.9391%" y="351.50"></text></g><g><title>__tls_get_addr (1 samples, 0.19%)</title><rect x="22.4568%" y="325" width="0.1919%" height="15" fill="rgb(250,79,13)" fg:x="117" fg:w="1"/><text x="22.7068%" y="335.50"></text></g><g><title>at::globalContext (1 samples, 0.19%)</title><rect x="22.6488%" y="341" width="0.1919%" height="15" fill="rgb(211,146,34)" fg:x="118" fg:w="1"/><text x="22.8988%" y="351.50"></text></g><g><title>at::inferExpandGeometry_dimvector (1 samples, 0.19%)</title><rect x="22.8407%" y="341" width="0.1919%" height="15" fill="rgb(228,22,38)" fg:x="119" fg:w="1"/><text x="23.0907%" y="351.50"></text></g><g><title>at::meta::structured_addmm::meta (1 samples, 0.19%)</title><rect x="23.0326%" y="341" width="0.1919%" height="15" fill="rgb(235,168,5)" fg:x="120" fg:w="1"/><text x="23.2826%" y="351.50"></text></g><g><title>at::meta::structured_sigmoid::meta (1 samples, 0.19%)</title><rect x="23.2246%" y="341" width="0.1919%" height="15" fill="rgb(221,155,16)" fg:x="121" fg:w="1"/><text x="23.4746%" y="351.50"></text></g><g><title>at::namedinference::propagate_names_for_expand (2 samples, 0.38%)</title><rect x="23.4165%" y="341" width="0.3839%" height="15" fill="rgb(215,215,53)" fg:x="122" fg:w="2"/><text x="23.6665%" y="351.50"></text></g><g><title>at::native::_flatten_nd_linear (1 samples, 0.19%)</title><rect x="23.8004%" y="341" width="0.1919%" height="15" fill="rgb(223,4,10)" fg:x="124" fg:w="1"/><text x="24.0504%" y="351.50"></text></g><g><title>at::native::_to_copy (2 samples, 0.38%)</title><rect x="23.9923%" y="341" width="0.3839%" height="15" fill="rgb(234,103,6)" fg:x="125" fg:w="2"/><text x="24.2423%" y="351.50"></text></g><g><title>at::native::addmm_impl_cpu_ (2 samples, 0.38%)</title><rect x="24.3762%" y="341" width="0.3839%" height="15" fill="rgb(227,97,0)" fg:x="127" fg:w="2"/><text x="24.6262%" y="351.50"></text></g><g><title>at::native::as_strided_tensorimpl (1 samples, 0.19%)</title><rect x="24.7601%" y="341" width="0.1919%" height="15" fill="rgb(234,150,53)" fg:x="129" fg:w="1"/><text x="25.0101%" y="351.50"></text></g><g><title>at::native::copy_ (2 samples, 0.38%)</title><rect x="24.9520%" y="341" width="0.3839%" height="15" fill="rgb(228,201,54)" fg:x="130" fg:w="2"/><text x="25.2020%" y="351.50"></text></g><g><title>at::native::copy_impl (4 samples, 0.77%)</title><rect x="25.3359%" y="341" width="0.7678%" height="15" fill="rgb(222,22,37)" fg:x="132" fg:w="4"/><text x="25.5859%" y="351.50"></text></g><g><title>at::native::cpublas::gemm (1 samples, 0.19%)</title><rect x="26.1036%" y="341" width="0.1919%" height="15" fill="rgb(237,53,32)" fg:x="136" fg:w="1"/><text x="26.3536%" y="351.50"></text></g><g><title>at::native::empty_strided_cpu (2 samples, 0.38%)</title><rect x="26.2956%" y="341" width="0.3839%" height="15" fill="rgb(233,25,53)" fg:x="137" fg:w="2"/><text x="26.5456%" y="351.50"></text></g><g><title>at::native::expand (2 samples, 0.38%)</title><rect x="26.6795%" y="341" width="0.3839%" height="15" fill="rgb(210,40,34)" fg:x="139" fg:w="2"/><text x="26.9295%" y="351.50"></text></g><g><title>at::native::item (1 samples, 0.19%)</title><rect x="27.0633%" y="341" width="0.1919%" height="15" fill="rgb(241,220,44)" fg:x="141" fg:w="1"/><text x="27.3133%" y="351.50"></text></g><g><title>at::native::linear (1 samples, 0.19%)</title><rect x="27.2553%" y="341" width="0.1919%" height="15" fill="rgb(235,28,35)" fg:x="142" fg:w="1"/><text x="27.5053%" y="351.50"></text></g><g><title>at::native::reshape_symint (1 samples, 0.19%)</title><rect x="27.4472%" y="341" width="0.1919%" height="15" fill="rgb(210,56,17)" fg:x="143" fg:w="1"/><text x="27.6972%" y="351.50"></text></g><g><title>at::native::structured_leaky_relu_out::impl (2 samples, 0.38%)</title><rect x="27.6392%" y="341" width="0.3839%" height="15" fill="rgb(224,130,29)" fg:x="144" fg:w="2"/><text x="27.8892%" y="351.50"></text></g><g><title>at::native::structured_sigmoid_out::impl (2 samples, 0.38%)</title><rect x="28.0230%" y="341" width="0.3839%" height="15" fill="rgb(235,212,8)" fg:x="146" fg:w="2"/><text x="28.2730%" y="351.50"></text></g><g><title>at::native::to (2 samples, 0.38%)</title><rect x="28.4069%" y="341" width="0.3839%" height="15" fill="rgb(223,33,50)" fg:x="148" fg:w="2"/><text x="28.6569%" y="351.50"></text></g><g><title>at::native::transpose (3 samples, 0.58%)</title><rect x="28.7908%" y="341" width="0.5758%" height="15" fill="rgb(219,149,13)" fg:x="150" fg:w="3"/><text x="29.0408%" y="351.50"></text></g><g><title>at::native::view (6 samples, 1.15%)</title><rect x="29.3666%" y="341" width="1.1516%" height="15" fill="rgb(250,156,29)" fg:x="153" fg:w="6"/><text x="29.6166%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="30.3263%" y="325" width="0.1919%" height="15" fill="rgb(216,193,19)" fg:x="158" fg:w="1"/><text x="30.5763%" y="335.50"></text></g><g><title>at::original_options (1 samples, 0.19%)</title><rect x="30.5182%" y="341" width="0.1919%" height="15" fill="rgb(216,135,14)" fg:x="159" fg:w="1"/><text x="30.7682%" y="351.50"></text></g><g><title>bool at::native::_resize_output_check&lt;long&gt; (1 samples, 0.19%)</title><rect x="30.7102%" y="341" width="0.1919%" height="15" fill="rgb(241,47,5)" fg:x="160" fg:w="1"/><text x="30.9602%" y="351.50"></text></g><g><title>bool torch::jit::InterpreterStateImpl::runTemplate&lt;false&gt; (11 samples, 2.11%)</title><rect x="30.9021%" y="341" width="2.1113%" height="15" fill="rgb(233,42,35)" fg:x="161" fg:w="11"/><text x="31.1521%" y="351.50">b..</text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (2 samples, 0.38%)</title><rect x="32.6296%" y="325" width="0.3839%" height="15" fill="rgb(231,13,6)" fg:x="170" fg:w="2"/><text x="32.8796%" y="335.50"></text></g><g><title>c10::AutogradState::get_tls_state (3 samples, 0.58%)</title><rect x="33.0134%" y="341" width="0.5758%" height="15" fill="rgb(207,181,40)" fg:x="172" fg:w="3"/><text x="33.2634%" y="351.50"></text></g><g><title>__tls_get_addr (1 samples, 0.19%)</title><rect x="33.3973%" y="325" width="0.1919%" height="15" fill="rgb(254,173,49)" fg:x="174" fg:w="1"/><text x="33.6473%" y="335.50"></text></g><g><title>cfree (1 samples, 0.19%)</title><rect x="33.7812%" y="325" width="0.1919%" height="15" fill="rgb(221,1,38)" fg:x="176" fg:w="1"/><text x="34.0312%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="33.7812%" y="309" width="0.1919%" height="15" fill="rgb(206,124,46)" fg:x="176" fg:w="1"/><text x="34.0312%" y="319.50"></text></g><g><title>operator delete (1 samples, 0.19%)</title><rect x="33.9731%" y="325" width="0.1919%" height="15" fill="rgb(249,21,11)" fg:x="177" fg:w="1"/><text x="34.2231%" y="335.50"></text></g><g><title>c10::Dict&lt;std::string, c10::List&lt;c10::IValue&gt; &gt;::Dict (6 samples, 1.15%)</title><rect x="33.5893%" y="341" width="1.1516%" height="15" fill="rgb(222,201,40)" fg:x="175" fg:w="6"/><text x="33.8393%" y="351.50"></text></g><g><title>operator new (3 samples, 0.58%)</title><rect x="34.1651%" y="325" width="0.5758%" height="15" fill="rgb(235,61,29)" fg:x="178" fg:w="3"/><text x="34.4151%" y="335.50"></text></g><g><title>malloc (3 samples, 0.58%)</title><rect x="34.1651%" y="309" width="0.5758%" height="15" fill="rgb(219,207,3)" fg:x="178" fg:w="3"/><text x="34.4151%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="34.5489%" y="293" width="0.1919%" height="15" fill="rgb(222,56,46)" fg:x="180" fg:w="1"/><text x="34.7989%" y="303.50"></text></g><g><title>c10::DispatchKeyExtractor::setOperatorHasFallthroughForKey (3 samples, 0.58%)</title><rect x="34.7409%" y="341" width="0.5758%" height="15" fill="rgb(239,76,54)" fg:x="181" fg:w="3"/><text x="34.9909%" y="351.50"></text></g><g><title>c10::DispatchKeySet::DispatchKeySet (8 samples, 1.54%)</title><rect x="35.3167%" y="341" width="1.5355%" height="15" fill="rgb(231,124,27)" fg:x="184" fg:w="8"/><text x="35.5667%" y="351.50"></text></g><g><title>c10::Dispatcher::callBoxed (5 samples, 0.96%)</title><rect x="36.8522%" y="341" width="0.9597%" height="15" fill="rgb(249,195,6)" fg:x="192" fg:w="5"/><text x="37.1022%" y="351.50"></text></g><g><title>c10::Dispatcher::cleanup (1 samples, 0.19%)</title><rect x="37.8119%" y="341" width="0.1919%" height="15" fill="rgb(237,174,47)" fg:x="197" fg:w="1"/><text x="38.0619%" y="351.50"></text></g><g><title>c10::GetAllocator (1 samples, 0.19%)</title><rect x="38.0038%" y="341" width="0.1919%" height="15" fill="rgb(206,201,31)" fg:x="198" fg:w="1"/><text x="38.2538%" y="351.50"></text></g><g><title>c10::GradMode::is_enabled (1 samples, 0.19%)</title><rect x="38.1958%" y="341" width="0.1919%" height="15" fill="rgb(231,57,52)" fg:x="199" fg:w="1"/><text x="38.4458%" y="351.50"></text></g><g><title>c10::IValue::IValue (3 samples, 0.58%)</title><rect x="38.3877%" y="341" width="0.5758%" height="15" fill="rgb(248,177,22)" fg:x="200" fg:w="3"/><text x="38.6377%" y="351.50"></text></g><g><title>c10::IValue::TagType&lt;c10::Type&gt;::get (1 samples, 0.19%)</title><rect x="38.9635%" y="341" width="0.1919%" height="15" fill="rgb(215,211,37)" fg:x="203" fg:w="1"/><text x="39.2135%" y="351.50"></text></g><g><title>c10::IValue::destroy (1 samples, 0.19%)</title><rect x="39.1555%" y="341" width="0.1919%" height="15" fill="rgb(241,128,51)" fg:x="204" fg:w="1"/><text x="39.4055%" y="351.50"></text></g><g><title>c10::InferenceMode::is_enabled (1 samples, 0.19%)</title><rect x="39.3474%" y="341" width="0.1919%" height="15" fill="rgb(227,165,31)" fg:x="205" fg:w="1"/><text x="39.5974%" y="351.50"></text></g><g><title>c10::OptionalType::str (1 samples, 0.19%)</title><rect x="39.5393%" y="341" width="0.1919%" height="15" fill="rgb(228,167,24)" fg:x="206" fg:w="1"/><text x="39.7893%" y="351.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init (1 samples, 0.19%)</title><rect x="39.5393%" y="325" width="0.1919%" height="15" fill="rgb(228,143,12)" fg:x="206" fg:w="1"/><text x="39.7893%" y="335.50"></text></g><g><title>std::ios_base::_M_init (1 samples, 0.19%)</title><rect x="39.5393%" y="309" width="0.1919%" height="15" fill="rgb(249,149,8)" fg:x="206" fg:w="1"/><text x="39.7893%" y="319.50"></text></g><g><title>c10::ProfiledCPUMemoryReporter::New (1 samples, 0.19%)</title><rect x="39.7313%" y="341" width="0.1919%" height="15" fill="rgb(243,35,44)" fg:x="207" fg:w="1"/><text x="39.9813%" y="351.50"></text></g><g><title>c10::Scalar::toFloat (2 samples, 0.38%)</title><rect x="39.9232%" y="341" width="0.3839%" height="15" fill="rgb(246,89,9)" fg:x="208" fg:w="2"/><text x="40.1732%" y="351.50"></text></g><g><title>c10::SmallVector&lt;c10::SymInt, 5u&gt;::~SmallVector (2 samples, 0.38%)</title><rect x="40.3071%" y="341" width="0.3839%" height="15" fill="rgb(233,213,13)" fg:x="210" fg:w="2"/><text x="40.5571%" y="351.50"></text></g><g><title>c10::SmallVectorImpl&lt;long&gt;::operator= (1 samples, 0.19%)</title><rect x="40.6910%" y="341" width="0.1919%" height="15" fill="rgb(233,141,41)" fg:x="212" fg:w="1"/><text x="40.9410%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="40.6910%" y="325" width="0.1919%" height="15" fill="rgb(239,167,4)" fg:x="212" fg:w="1"/><text x="40.9410%" y="335.50"></text></g><g><title>c10::StringType::get (1 samples, 0.19%)</title><rect x="40.8829%" y="341" width="0.1919%" height="15" fill="rgb(209,217,16)" fg:x="213" fg:w="1"/><text x="41.1329%" y="351.50"></text></g><g><title>c10::TensorImpl::TensorImpl (5 samples, 0.96%)</title><rect x="41.0749%" y="341" width="0.9597%" height="15" fill="rgb(219,88,35)" fg:x="214" fg:w="5"/><text x="41.3249%" y="351.50"></text></g><g><title>operator new (2 samples, 0.38%)</title><rect x="41.6507%" y="325" width="0.3839%" height="15" fill="rgb(220,193,23)" fg:x="217" fg:w="2"/><text x="41.9007%" y="335.50"></text></g><g><title>malloc (2 samples, 0.38%)</title><rect x="41.6507%" y="309" width="0.3839%" height="15" fill="rgb(230,90,52)" fg:x="217" fg:w="2"/><text x="41.9007%" y="319.50"></text></g><g><title>c10::TensorImpl::_fw_grad (2 samples, 0.38%)</title><rect x="42.0345%" y="341" width="0.3839%" height="15" fill="rgb(252,106,19)" fg:x="219" fg:w="2"/><text x="42.2845%" y="351.50"></text></g><g><title>c10::TensorImpl::autograd_meta (1 samples, 0.19%)</title><rect x="42.4184%" y="341" width="0.1919%" height="15" fill="rgb(206,74,20)" fg:x="221" fg:w="1"/><text x="42.6684%" y="351.50"></text></g><g><title>c10::TensorImpl::compute_contiguous (2 samples, 0.38%)</title><rect x="42.6104%" y="341" width="0.3839%" height="15" fill="rgb(230,138,44)" fg:x="222" fg:w="2"/><text x="42.8604%" y="351.50"></text></g><g><title>c10::TensorImpl::compute_non_overlapping_and_dense (4 samples, 0.77%)</title><rect x="42.9942%" y="341" width="0.7678%" height="15" fill="rgb(235,182,43)" fg:x="224" fg:w="4"/><text x="43.2442%" y="351.50"></text></g><g><title>c10::TensorImpl::empty_tensor_restride (3 samples, 0.58%)</title><rect x="43.7620%" y="341" width="0.5758%" height="15" fill="rgb(242,16,51)" fg:x="228" fg:w="3"/><text x="44.0120%" y="351.50"></text></g><g><title>c10::TensorImpl::set_autograd_meta (1 samples, 0.19%)</title><rect x="44.3378%" y="341" width="0.1919%" height="15" fill="rgb(248,9,4)" fg:x="231" fg:w="1"/><text x="44.5878%" y="351.50"></text></g><g><title>c10::TensorImpl::set_sizes_and_strides (4 samples, 0.77%)</title><rect x="44.5298%" y="341" width="0.7678%" height="15" fill="rgb(210,31,22)" fg:x="232" fg:w="4"/><text x="44.7798%" y="351.50"></text></g><g><title>c10::TensorImpl::storage (1 samples, 0.19%)</title><rect x="45.2975%" y="341" width="0.1919%" height="15" fill="rgb(239,54,39)" fg:x="236" fg:w="1"/><text x="45.5475%" y="351.50"></text></g><g><title>c10::TensorImpl::support_as_strided (2 samples, 0.38%)</title><rect x="45.4894%" y="341" width="0.3839%" height="15" fill="rgb(230,99,41)" fg:x="237" fg:w="2"/><text x="45.7394%" y="351.50"></text></g><g><title>c10::TensorImpl::sym_size (1 samples, 0.19%)</title><rect x="45.8733%" y="341" width="0.1919%" height="15" fill="rgb(253,106,12)" fg:x="239" fg:w="1"/><text x="46.1233%" y="351.50"></text></g><g><title>c10::TensorImpl::~TensorImpl (2 samples, 0.38%)</title><rect x="46.0653%" y="341" width="0.3839%" height="15" fill="rgb(213,46,41)" fg:x="240" fg:w="2"/><text x="46.3153%" y="351.50"></text></g><g><title>cfree (1 samples, 0.19%)</title><rect x="46.2572%" y="325" width="0.1919%" height="15" fill="rgb(215,133,35)" fg:x="241" fg:w="1"/><text x="46.5072%" y="335.50"></text></g><g><title>c10::alloc_cpu (9 samples, 1.73%)</title><rect x="46.4491%" y="341" width="1.7274%" height="15" fill="rgb(213,28,5)" fg:x="242" fg:w="9"/><text x="46.6991%" y="351.50"></text></g><g><title>posix_memalign (7 samples, 1.34%)</title><rect x="46.8330%" y="325" width="1.3436%" height="15" fill="rgb(215,77,49)" fg:x="244" fg:w="7"/><text x="47.0830%" y="335.50"></text></g><g><title>[libc.so.6] (7 samples, 1.34%)</title><rect x="46.8330%" y="309" width="1.3436%" height="15" fill="rgb(248,100,22)" fg:x="244" fg:w="7"/><text x="47.0830%" y="319.50"></text></g><g><title>[libc.so.6] (4 samples, 0.77%)</title><rect x="47.4088%" y="293" width="0.7678%" height="15" fill="rgb(208,67,9)" fg:x="247" fg:w="4"/><text x="47.6588%" y="303.50"></text></g><g><title>[libc.so.6] (4 samples, 0.77%)</title><rect x="47.4088%" y="277" width="0.7678%" height="15" fill="rgb(219,133,21)" fg:x="247" fg:w="4"/><text x="47.6588%" y="287.50"></text></g><g><title>c10::detail::DictImpl::DictElementTypes::~DictElementTypes (1 samples, 0.19%)</title><rect x="48.1766%" y="341" width="0.1919%" height="15" fill="rgb(246,46,29)" fg:x="251" fg:w="1"/><text x="48.4266%" y="351.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release (1 samples, 0.19%)</title><rect x="48.1766%" y="325" width="0.1919%" height="15" fill="rgb(246,185,52)" fg:x="251" fg:w="1"/><text x="48.4266%" y="335.50"></text></g><g><title>c10::getBackendKeySetFromAutograd (1 samples, 0.19%)</title><rect x="48.3685%" y="341" width="0.1919%" height="15" fill="rgb(252,136,11)" fg:x="252" fg:w="1"/><text x="48.6185%" y="351.50"></text></g><g><title>c10::impl::ExcludeDispatchKeyGuard::ExcludeDispatchKeyGuard (3 samples, 0.58%)</title><rect x="48.5605%" y="341" width="0.5758%" height="15" fill="rgb(219,138,53)" fg:x="253" fg:w="3"/><text x="48.8105%" y="351.50"></text></g><g><title>c10::impl::GetAutogradMetaFactory (3 samples, 0.58%)</title><rect x="49.1363%" y="341" width="0.5758%" height="15" fill="rgb(211,51,23)" fg:x="256" fg:w="3"/><text x="49.3863%" y="351.50"></text></g><g><title>c10::impl::OperatorEntry::computeDispatchTableEntryWithDebug (1 samples, 0.19%)</title><rect x="49.7121%" y="341" width="0.1919%" height="15" fill="rgb(247,221,28)" fg:x="259" fg:w="1"/><text x="49.9621%" y="351.50"></text></g><g><title>c10::impl::OperatorEntry::lookup (15 samples, 2.88%)</title><rect x="49.9040%" y="341" width="2.8791%" height="15" fill="rgb(251,222,45)" fg:x="260" fg:w="15"/><text x="50.1540%" y="351.50">c1..</text></g><g><title>c10::impl::OperatorEntry::updateDispatchTableEntry_ (1 samples, 0.19%)</title><rect x="52.7831%" y="341" width="0.1919%" height="15" fill="rgb(217,162,53)" fg:x="275" fg:w="1"/><text x="53.0331%" y="351.50"></text></g><g><title>c10::impl::OperatorEntry::~OperatorEntry (1 samples, 0.19%)</title><rect x="52.9750%" y="341" width="0.1919%" height="15" fill="rgb(229,93,14)" fg:x="276" fg:w="1"/><text x="53.2250%" y="351.50"></text></g><g><title>cfree (1 samples, 0.19%)</title><rect x="52.9750%" y="325" width="0.1919%" height="15" fill="rgb(209,67,49)" fg:x="276" fg:w="1"/><text x="53.2250%" y="335.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="52.9750%" y="309" width="0.1919%" height="15" fill="rgb(213,87,29)" fg:x="276" fg:w="1"/><text x="53.2250%" y="319.50"></text></g><g><title>c10::impl::PyObjectSlot::~PyObjectSlot (1 samples, 0.19%)</title><rect x="53.1670%" y="341" width="0.1919%" height="15" fill="rgb(205,151,52)" fg:x="277" fg:w="1"/><text x="53.4170%" y="351.50"></text></g><g><title>c10::impl::make_boxed_from_unboxed_functor&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (at::Tensor const&amp;, at::Tensor const&amp;, std::optional&lt;at::Tensor&gt; const&amp;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__linear&gt;, at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, at::Tensor const&amp;, std::optional&lt;at::Tensor&gt; const&amp;&gt; &gt;, false&gt;::call (1 samples, 0.19%)</title><rect x="53.3589%" y="341" width="0.1919%" height="15" fill="rgb(253,215,39)" fg:x="278" fg:w="1"/><text x="53.6089%" y="351.50"></text></g><g><title>c10::impl::make_boxed_from_unboxed_functor&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::DispatchKeySet, at::Tensor const&amp;, c10::Scalar const&amp;), &amp;torch::autograd::VariableType::(anonymous namespace)::leaky_relu&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::DispatchKeySet, at::Tensor const&amp;, c10::Scalar const&amp;&gt; &gt;, false&gt;::call (1 samples, 0.19%)</title><rect x="53.5509%" y="341" width="0.1919%" height="15" fill="rgb(221,220,41)" fg:x="279" fg:w="1"/><text x="53.8009%" y="351.50"></text></g><g><title>c10::impl::tls_set_dispatch_key_excluded (1 samples, 0.19%)</title><rect x="53.7428%" y="341" width="0.1919%" height="15" fill="rgb(218,133,21)" fg:x="280" fg:w="1"/><text x="53.9928%" y="351.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (at::Tensor const&amp;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CompositeImplicitAutograd__resolve_conj&gt;, at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;&gt; &gt;, at::Tensor (at::Tensor const&amp;)&gt;::call (1 samples, 0.19%)</title><rect x="53.9347%" y="341" width="0.1919%" height="15" fill="rgb(221,193,43)" fg:x="281" fg:w="1"/><text x="54.1847%" y="351.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (at::Tensor const&amp;, c10::ArrayRef&lt;c10::SymInt&gt;), &amp;at::(anonymous namespace)::(anonymous namespace)::wrapper_CPU__view&gt;, at::Tensor, c10::guts::typelist::typelist&lt;at::Tensor const&amp;, c10::ArrayRef&lt;c10::SymInt&gt; &gt; &gt;, at::Tensor (at::Tensor const&amp;, c10::ArrayRef&lt;c10::SymInt&gt;)&gt;::call (1 samples, 0.19%)</title><rect x="54.1267%" y="341" width="0.1919%" height="15" fill="rgb(240,128,52)" fg:x="282" fg:w="1"/><text x="54.3767%" y="351.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::ArrayRef&lt;c10::SymInt&gt;, c10::ArrayRef&lt;c10::SymInt&gt;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;), &amp;at::(anonymous namespace)::empty_strided&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::ArrayRef&lt;c10::SymInt&gt;, c10::ArrayRef&lt;c10::SymInt&gt;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt; &gt; &gt;, at::Tensor (c10::ArrayRef&lt;c10::SymInt&gt;, c10::ArrayRef&lt;c10::SymInt&gt;, std::optional&lt;c10::ScalarType&gt;, std::optional&lt;c10::Layout&gt;, std::optional&lt;c10::Device&gt;, std::optional&lt;bool&gt;)&gt;::call (2 samples, 0.38%)</title><rect x="54.3186%" y="341" width="0.3839%" height="15" fill="rgb(253,114,12)" fg:x="283" fg:w="2"/><text x="54.5686%" y="351.50"></text></g><g><title>c10::impl::wrap_kernel_functor_unboxed_&lt;c10::impl::detail::WrapFunctionIntoFunctor_&lt;c10::CompileTimeFunctionPointer&lt;at::Tensor (c10::DispatchKeySet, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, c10::Scalar const&amp;, c10::Scalar const&amp;), &amp;torch::autograd::VariableType::(anonymous namespace)::addmm&gt;, at::Tensor, c10::guts::typelist::typelist&lt;c10::DispatchKeySet, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, c10::Scalar const&amp;, c10::Scalar const&amp;&gt; &gt;, at::Tensor (c10::DispatchKeySet, at::Tensor const&amp;, at::Tensor const&amp;, at::Tensor const&amp;, c10::Scalar const&amp;, c10::Scalar const&amp;)&gt;::call (1 samples, 0.19%)</title><rect x="54.7025%" y="341" width="0.1919%" height="15" fill="rgb(215,223,47)" fg:x="285" fg:w="1"/><text x="54.9525%" y="351.50"></text></g><g><title>c10::intrusive_ptr&lt;c10::StorageImpl, c10::detail::intrusive_target_default_null_type&lt;c10::StorageImpl&gt; &gt;::intrusive_ptr (1 samples, 0.19%)</title><rect x="54.8944%" y="341" width="0.1919%" height="15" fill="rgb(248,225,23)" fg:x="286" fg:w="1"/><text x="55.1444%" y="351.50"></text></g><g><title>c10::intrusive_ptr&lt;c10::StorageImpl, c10::detail::intrusive_target_default_null_type&lt;c10::StorageImpl&gt; &gt;::reset_ (8 samples, 1.54%)</title><rect x="55.0864%" y="341" width="1.5355%" height="15" fill="rgb(250,108,0)" fg:x="287" fg:w="8"/><text x="55.3364%" y="351.50"></text></g><g><title>cfree (4 samples, 0.77%)</title><rect x="55.8541%" y="325" width="0.7678%" height="15" fill="rgb(228,208,7)" fg:x="291" fg:w="4"/><text x="56.1041%" y="335.50"></text></g><g><title>[libc.so.6] (4 samples, 0.77%)</title><rect x="55.8541%" y="309" width="0.7678%" height="15" fill="rgb(244,45,10)" fg:x="291" fg:w="4"/><text x="56.1041%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="56.4299%" y="293" width="0.1919%" height="15" fill="rgb(207,125,25)" fg:x="294" fg:w="1"/><text x="56.6799%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="56.4299%" y="277" width="0.1919%" height="15" fill="rgb(210,195,18)" fg:x="294" fg:w="1"/><text x="56.6799%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="56.4299%" y="261" width="0.1919%" height="15" fill="rgb(249,80,12)" fg:x="294" fg:w="1"/><text x="56.6799%" y="271.50"></text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;&amp; c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::operator=&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt; (1 samples, 0.19%)</title><rect x="56.6219%" y="341" width="0.1919%" height="15" fill="rgb(221,65,9)" fg:x="295" fg:w="1"/><text x="56.8719%" y="351.50"></text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::UndefinedTensorImpl&gt;::reset_ (5 samples, 0.96%)</title><rect x="56.8138%" y="341" width="0.9597%" height="15" fill="rgb(235,49,36)" fg:x="296" fg:w="5"/><text x="57.0638%" y="351.50"></text></g><g><title>c10::intrusive_ptr&lt;c10::TensorImpl, c10::detail::intrusive_target_default_null_type&lt;c10::TensorImpl&gt; &gt;::intrusive_ptr (2 samples, 0.38%)</title><rect x="57.7735%" y="341" width="0.3839%" height="15" fill="rgb(225,32,20)" fg:x="301" fg:w="2"/><text x="58.0235%" y="351.50"></text></g><g><title>c10::intrusive_ptr&lt;c10::VariableVersion::VersionCounter, c10::detail::intrusive_target_default_null_type&lt;c10::VariableVersion::VersionCounter&gt; &gt;::reset_ (2 samples, 0.38%)</title><rect x="58.1574%" y="341" width="0.3839%" height="15" fill="rgb(215,141,46)" fg:x="303" fg:w="2"/><text x="58.4074%" y="351.50"></text></g><g><title>c10::intrusive_ptr&lt;c10::detail::DictImpl, c10::detail::intrusive_target_default_null_type&lt;c10::detail::DictImpl&gt; &gt;::intrusive_ptr (2 samples, 0.38%)</title><rect x="58.5413%" y="341" width="0.3839%" height="15" fill="rgb(250,160,47)" fg:x="305" fg:w="2"/><text x="58.7913%" y="351.50"></text></g><g><title>c10::isBackendDispatchKey (1 samples, 0.19%)</title><rect x="58.9251%" y="341" width="0.1919%" height="15" fill="rgb(216,222,40)" fg:x="307" fg:w="1"/><text x="59.1751%" y="351.50"></text></g><g><title>c10::isIncludedInAlias (1 samples, 0.19%)</title><rect x="59.1171%" y="341" width="0.1919%" height="15" fill="rgb(234,217,39)" fg:x="308" fg:w="1"/><text x="59.3671%" y="351.50"></text></g><g><title>c10::isSharedStorageAlias (1 samples, 0.19%)</title><rect x="59.3090%" y="341" width="0.1919%" height="15" fill="rgb(207,178,40)" fg:x="309" fg:w="1"/><text x="59.5590%" y="351.50"></text></g><g><title>c10::ivalue::Object::type (1 samples, 0.19%)</title><rect x="59.5010%" y="341" width="0.1919%" height="15" fill="rgb(221,136,13)" fg:x="310" fg:w="1"/><text x="59.7510%" y="351.50"></text></g><g><title>c10::runtimeDispatchKeySetHas (1 samples, 0.19%)</title><rect x="59.6929%" y="341" width="0.1919%" height="15" fill="rgb(249,199,10)" fg:x="311" fg:w="1"/><text x="59.9429%" y="351.50"></text></g><g><title>c10::{lambda()#1}::_FUN (3 samples, 0.58%)</title><rect x="59.8848%" y="341" width="0.5758%" height="15" fill="rgb(249,222,13)" fg:x="312" fg:w="3"/><text x="60.1348%" y="351.50"></text></g><g><title>float const* at::TensorBase::const_data_ptr&lt;float, 0&gt; (2 samples, 0.38%)</title><rect x="60.4607%" y="341" width="0.3839%" height="15" fill="rgb(244,185,38)" fg:x="315" fg:w="2"/><text x="60.7107%" y="351.50"></text></g><g><title>memcpy@plt (1 samples, 0.19%)</title><rect x="60.8445%" y="341" width="0.1919%" height="15" fill="rgb(236,202,9)" fg:x="317" fg:w="1"/><text x="61.0945%" y="351.50"></text></g><g><title>operator new (1 samples, 0.19%)</title><rect x="61.8042%" y="245" width="0.1919%" height="15" fill="rgb(250,229,37)" fg:x="322" fg:w="1"/><text x="62.0542%" y="255.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="61.8042%" y="229" width="0.1919%" height="15" fill="rgb(206,174,23)" fg:x="322" fg:w="1"/><text x="62.0542%" y="239.50"></text></g><g><title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (2 samples, 0.38%)</title><rect x="61.9962%" y="245" width="0.3839%" height="15" fill="rgb(211,33,43)" fg:x="323" fg:w="2"/><text x="62.2462%" y="255.50"></text></g><g><title>char* std::string::_S_construct&lt;char*&gt; (2 samples, 0.38%)</title><rect x="61.9962%" y="229" width="0.3839%" height="15" fill="rgb(245,58,50)" fg:x="323" fg:w="2"/><text x="62.2462%" y="239.50"></text></g><g><title>char* std::string::_S_construct_aux&lt;char*&gt; (2 samples, 0.38%)</title><rect x="61.9962%" y="213" width="0.3839%" height="15" fill="rgb(244,68,36)" fg:x="323" fg:w="2"/><text x="62.2462%" y="223.50"></text></g><g><title>char* std::string::_S_construct&lt;char*&gt; (2 samples, 0.38%)</title><rect x="61.9962%" y="197" width="0.3839%" height="15" fill="rgb(232,229,15)" fg:x="323" fg:w="2"/><text x="62.2462%" y="207.50"></text></g><g><title>std::string::_Rep::_S_create (1 samples, 0.19%)</title><rect x="62.1881%" y="181" width="0.1919%" height="15" fill="rgb(254,30,23)" fg:x="324" fg:w="1"/><text x="62.4381%" y="191.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.19%)</title><rect x="62.1881%" y="165" width="0.1919%" height="15" fill="rgb(235,160,14)" fg:x="324" fg:w="1"/><text x="62.4381%" y="175.50"></text></g><g><title>operator new (1 samples, 0.19%)</title><rect x="62.1881%" y="149" width="0.1919%" height="15" fill="rgb(212,155,44)" fg:x="324" fg:w="1"/><text x="62.4381%" y="159.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="62.1881%" y="133" width="0.1919%" height="15" fill="rgb(226,2,50)" fg:x="324" fg:w="1"/><text x="62.4381%" y="143.50"></text></g><g><title>get_words (4 samples, 0.77%)</title><rect x="61.8042%" y="261" width="0.7678%" height="15" fill="rgb(234,177,6)" fg:x="322" fg:w="4"/><text x="62.0542%" y="271.50"></text></g><g><title>std::string::_M_mutate (1 samples, 0.19%)</title><rect x="62.3800%" y="245" width="0.1919%" height="15" fill="rgb(217,24,9)" fg:x="325" fg:w="1"/><text x="62.6300%" y="255.50"></text></g><g><title>isalpha (3 samples, 0.58%)</title><rect x="62.5720%" y="261" width="0.5758%" height="15" fill="rgb(220,13,46)" fg:x="326" fg:w="3"/><text x="62.8220%" y="271.50"></text></g><g><title>board_array_from_fen (11 samples, 2.11%)</title><rect x="61.4203%" y="277" width="2.1113%" height="15" fill="rgb(239,221,27)" fg:x="320" fg:w="11"/><text x="61.6703%" y="287.50">b..</text></g><g><title>std::string::_M_leak_hard (2 samples, 0.38%)</title><rect x="63.1478%" y="261" width="0.3839%" height="15" fill="rgb(222,198,25)" fg:x="329" fg:w="2"/><text x="63.3978%" y="271.50"></text></g><g><title>std::string::_M_mutate (2 samples, 0.38%)</title><rect x="63.1478%" y="245" width="0.3839%" height="15" fill="rgb(211,99,13)" fg:x="329" fg:w="2"/><text x="63.3978%" y="255.50"></text></g><g><title>std::string::_Rep::_M_dispose (1 samples, 0.19%)</title><rect x="63.3397%" y="229" width="0.1919%" height="15" fill="rgb(232,111,31)" fg:x="330" fg:w="1"/><text x="63.5897%" y="239.50"></text></g><g><title>std::string::_Rep::_M_dispose (1 samples, 0.19%)</title><rect x="63.3397%" y="213" width="0.1919%" height="15" fill="rgb(245,82,37)" fg:x="330" fg:w="1"/><text x="63.5897%" y="223.50"></text></g><g><title>__gnu_cxx::__exchange_and_add_dispatch (1 samples, 0.19%)</title><rect x="63.3397%" y="197" width="0.1919%" height="15" fill="rgb(227,149,46)" fg:x="330" fg:w="1"/><text x="63.5897%" y="207.50"></text></g><g><title>cfree (6 samples, 1.15%)</title><rect x="64.2994%" y="261" width="1.1516%" height="15" fill="rgb(218,36,50)" fg:x="335" fg:w="6"/><text x="64.5494%" y="271.50"></text></g><g><title>[libc.so.6] (3 samples, 0.58%)</title><rect x="64.8752%" y="245" width="0.5758%" height="15" fill="rgb(226,80,48)" fg:x="338" fg:w="3"/><text x="65.1252%" y="255.50"></text></g><g><title>[libc.so.6] (2 samples, 0.38%)</title><rect x="65.4511%" y="245" width="0.3839%" height="15" fill="rgb(238,224,15)" fg:x="341" fg:w="2"/><text x="65.7011%" y="255.50"></text></g><g><title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (3 samples, 0.58%)</title><rect x="65.4511%" y="261" width="0.5758%" height="15" fill="rgb(241,136,10)" fg:x="341" fg:w="3"/><text x="65.7011%" y="271.50"></text></g><g><title>std::string::_Rep::_S_create (1 samples, 0.19%)</title><rect x="65.8349%" y="245" width="0.1919%" height="15" fill="rgb(208,32,45)" fg:x="343" fg:w="1"/><text x="66.0849%" y="255.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.19%)</title><rect x="65.8349%" y="229" width="0.1919%" height="15" fill="rgb(207,135,9)" fg:x="343" fg:w="1"/><text x="66.0849%" y="239.50"></text></g><g><title>operator new (1 samples, 0.19%)</title><rect x="65.8349%" y="213" width="0.1919%" height="15" fill="rgb(206,86,44)" fg:x="343" fg:w="1"/><text x="66.0849%" y="223.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="65.8349%" y="197" width="0.1919%" height="15" fill="rgb(245,177,15)" fg:x="343" fg:w="1"/><text x="66.0849%" y="207.50"></text></g><g><title>std::string::append (2 samples, 0.38%)</title><rect x="66.0269%" y="261" width="0.3839%" height="15" fill="rgb(206,64,50)" fg:x="344" fg:w="2"/><text x="66.2769%" y="271.50"></text></g><g><title>std::string::_M_copy (1 samples, 0.19%)</title><rect x="66.2188%" y="245" width="0.1919%" height="15" fill="rgb(234,36,40)" fg:x="345" fg:w="1"/><text x="66.4688%" y="255.50"></text></g><g><title>std::char_traits&lt;char&gt;::assign (1 samples, 0.19%)</title><rect x="66.2188%" y="229" width="0.1919%" height="15" fill="rgb(213,64,8)" fg:x="345" fg:w="1"/><text x="66.4688%" y="239.50"></text></g><g><title>std::string::push_back (2 samples, 0.38%)</title><rect x="66.4107%" y="261" width="0.3839%" height="15" fill="rgb(210,75,36)" fg:x="346" fg:w="2"/><text x="66.6607%" y="271.50"></text></g><g><title>std::string::reserve (1 samples, 0.19%)</title><rect x="66.6027%" y="245" width="0.1919%" height="15" fill="rgb(229,88,21)" fg:x="347" fg:w="1"/><text x="66.8527%" y="255.50"></text></g><g><title>std::string::_Rep::_M_clone (1 samples, 0.19%)</title><rect x="66.6027%" y="229" width="0.1919%" height="15" fill="rgb(252,204,47)" fg:x="347" fg:w="1"/><text x="66.8527%" y="239.50"></text></g><g><title>std::string::_Rep::_S_create (1 samples, 0.19%)</title><rect x="66.6027%" y="213" width="0.1919%" height="15" fill="rgb(208,77,27)" fg:x="347" fg:w="1"/><text x="66.8527%" y="223.50"></text></g><g><title>chess::Board::getFen (18 samples, 3.45%)</title><rect x="63.5317%" y="277" width="3.4549%" height="15" fill="rgb(221,76,26)" fg:x="331" fg:w="18"/><text x="63.7817%" y="287.50">che..</text></g><g><title>void std::string::__resize_and_overwrite&lt;std::to_string(unsigned int)::{lambda(char*, unsigned long)#1}&gt; (1 samples, 0.19%)</title><rect x="66.7946%" y="261" width="0.1919%" height="15" fill="rgb(225,139,18)" fg:x="348" fg:w="1"/><text x="67.0446%" y="271.50"></text></g><g><title>std::string::reserve (1 samples, 0.19%)</title><rect x="66.7946%" y="245" width="0.1919%" height="15" fill="rgb(230,137,11)" fg:x="348" fg:w="1"/><text x="67.0446%" y="255.50"></text></g><g><title>std::string::_Rep::_M_clone (1 samples, 0.19%)</title><rect x="66.7946%" y="229" width="0.1919%" height="15" fill="rgb(212,28,1)" fg:x="348" fg:w="1"/><text x="67.0446%" y="239.50"></text></g><g><title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string&lt;std::allocator&lt;char&gt; &gt; (1 samples, 0.19%)</title><rect x="66.9866%" y="277" width="0.1919%" height="15" fill="rgb(248,164,17)" fg:x="349" fg:w="1"/><text x="67.2366%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="66.9866%" y="261" width="0.1919%" height="15" fill="rgb(222,171,42)" fg:x="349" fg:w="1"/><text x="67.2366%" y="271.50"></text></g><g><title>get_board_value (33 samples, 6.33%)</title><rect x="61.0365%" y="293" width="6.3340%" height="15" fill="rgb(243,84,45)" fg:x="318" fg:w="33"/><text x="61.2865%" y="303.50">get_boar..</text></g><g><title>std::string::_Rep::_M_destroy (1 samples, 0.19%)</title><rect x="67.1785%" y="277" width="0.1919%" height="15" fill="rgb(252,49,23)" fg:x="350" fg:w="1"/><text x="67.4285%" y="287.50"></text></g><g><title>chess::Board::~Board (1 samples, 0.19%)</title><rect x="67.5624%" y="261" width="0.1919%" height="15" fill="rgb(215,19,7)" fg:x="352" fg:w="1"/><text x="67.8124%" y="271.50"></text></g><g><title>std::string::_Rep::_M_dispose (1 samples, 0.19%)</title><rect x="67.5624%" y="245" width="0.1919%" height="15" fill="rgb(238,81,41)" fg:x="352" fg:w="1"/><text x="67.8124%" y="255.50"></text></g><g><title>minimax_internal (37 samples, 7.10%)</title><rect x="61.0365%" y="341" width="7.1017%" height="15" fill="rgb(210,199,37)" fg:x="318" fg:w="37"/><text x="61.2865%" y="351.50">minimax_in..</text></g><g><title>minimax_internal (37 samples, 7.10%)</title><rect x="61.0365%" y="325" width="7.1017%" height="15" fill="rgb(244,192,49)" fg:x="318" fg:w="37"/><text x="61.2865%" y="335.50">minimax_in..</text></g><g><title>minimax_internal (37 samples, 7.10%)</title><rect x="61.0365%" y="309" width="7.1017%" height="15" fill="rgb(226,211,11)" fg:x="318" fg:w="37"/><text x="61.2865%" y="319.50">minimax_in..</text></g><g><title>minimax_internal (4 samples, 0.77%)</title><rect x="67.3704%" y="293" width="0.7678%" height="15" fill="rgb(236,162,54)" fg:x="351" fg:w="4"/><text x="67.6204%" y="303.50"></text></g><g><title>minimax_internal (4 samples, 0.77%)</title><rect x="67.3704%" y="277" width="0.7678%" height="15" fill="rgb(220,229,9)" fg:x="351" fg:w="4"/><text x="67.6204%" y="287.50"></text></g><g><title>void chess::movegen::legalmoves&lt;(chess::Color::underlying)0, (chess::movegen::MoveGenType)0&gt; (2 samples, 0.38%)</title><rect x="67.7543%" y="261" width="0.3839%" height="15" fill="rgb(250,87,22)" fg:x="353" fg:w="2"/><text x="68.0043%" y="271.50"></text></g><g><title>void chess::movegen::generatePawnMoves&lt;(chess::Color::underlying)0, (chess::movegen::MoveGenType)0&gt; (1 samples, 0.19%)</title><rect x="67.9463%" y="245" width="0.1919%" height="15" fill="rgb(239,43,17)" fg:x="354" fg:w="1"/><text x="68.1963%" y="255.50"></text></g><g><title>mkl_blas__sgemm (2 samples, 0.38%)</title><rect x="68.1382%" y="341" width="0.3839%" height="15" fill="rgb(231,177,25)" fg:x="355" fg:w="2"/><text x="68.3882%" y="351.50"></text></g><g><title>mkl_blas_def_xsgemv (104 samples, 19.96%)</title><rect x="68.5221%" y="341" width="19.9616%" height="15" fill="rgb(219,179,1)" fg:x="357" fg:w="104"/><text x="68.7721%" y="351.50">mkl_blas_def_xsgemv</text></g><g><title>mkl_blas_sgemm (4 samples, 0.77%)</title><rect x="88.4837%" y="341" width="0.7678%" height="15" fill="rgb(238,219,53)" fg:x="461" fg:w="4"/><text x="88.7337%" y="351.50"></text></g><g><title>mkl_blas_sgemv (1 samples, 0.19%)</title><rect x="89.2514%" y="341" width="0.1919%" height="15" fill="rgb(232,167,36)" fg:x="465" fg:w="1"/><text x="89.5014%" y="351.50"></text></g><g><title>mkl_serv_intel_cpu (1 samples, 0.19%)</title><rect x="89.4434%" y="341" width="0.1919%" height="15" fill="rgb(244,19,51)" fg:x="466" fg:w="1"/><text x="89.6934%" y="351.50"></text></g><g><title>operator delete (1 samples, 0.19%)</title><rect x="89.6353%" y="341" width="0.1919%" height="15" fill="rgb(224,6,22)" fg:x="467" fg:w="1"/><text x="89.8853%" y="351.50"></text></g><g><title>operator new (2 samples, 0.38%)</title><rect x="89.8273%" y="341" width="0.3839%" height="15" fill="rgb(224,145,5)" fg:x="468" fg:w="2"/><text x="90.0773%" y="351.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="90.0192%" y="325" width="0.1919%" height="15" fill="rgb(234,130,49)" fg:x="469" fg:w="1"/><text x="90.2692%" y="335.50"></text></g><g><title>std::_Function_handler&lt;void (std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;), torch::jit::(anonymous namespace)::createOperatorFromC10(c10::OperatorHandle const&amp;)::{lambda(std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;&amp;)#1}&gt;::_M_invoke (1 samples, 0.19%)</title><rect x="90.2111%" y="341" width="0.1919%" height="15" fill="rgb(254,6,2)" fg:x="470" fg:w="1"/><text x="90.4611%" y="351.50"></text></g><g><title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (1 samples, 0.19%)</title><rect x="90.4031%" y="341" width="0.1919%" height="15" fill="rgb(208,96,46)" fg:x="471" fg:w="1"/><text x="90.6531%" y="351.50"></text></g><g><title>std::_Rb_tree&lt;c10::ShapeSymbol, std::pair&lt;c10::ShapeSymbol const, long&gt;, std::_Select1st&lt;std::pair&lt;c10::ShapeSymbol const, long&gt; &gt;, std::less&lt;c10::ShapeSymbol&gt;, std::allocator&lt;std::pair&lt;c10::ShapeSymbol const, long&gt; &gt; &gt;::_M_erase (1 samples, 0.19%)</title><rect x="90.5950%" y="341" width="0.1919%" height="15" fill="rgb(239,3,39)" fg:x="472" fg:w="1"/><text x="90.8450%" y="351.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;std::mutex, std::allocator&lt;std::mutex&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1 samples, 0.19%)</title><rect x="90.7869%" y="341" width="0.1919%" height="15" fill="rgb(233,210,1)" fg:x="473" fg:w="1"/><text x="91.0369%" y="351.50"></text></g><g><title>std::__detail::__variant::__gen_vtable_impl&lt;true, std::__detail::__variant::_Multi_array&lt;std::__detail::__variant::__variant_cookie (*)(std::__detail::__variant::_Variant_storage&lt;false, std::string, std::reference_wrapper&lt;c10::FunctionSchema const&gt; &gt;::_M_reset_impl()::{lambda(auto:1&amp;&amp;)#1}&amp;&amp;, std::variant&lt;std::string, std::reference_wrapper&lt;c10::FunctionSchema const&gt; &gt;&amp;)&gt;, std::tuple&lt;std::variant&lt;std::string, std::reference_wrapper&lt;c10::FunctionSchema const&gt; &gt;&amp;&gt;, std::integer_sequence&lt;unsigned long, 0ul&gt; &gt;::__visit_invoke (2 samples, 0.38%)</title><rect x="90.9789%" y="341" width="0.3839%" height="15" fill="rgb(244,137,37)" fg:x="474" fg:w="2"/><text x="91.2289%" y="351.50"></text></g><g><title>std::function&lt;at::Tensor (at::Tensor const&amp;)&gt;::function (1 samples, 0.19%)</title><rect x="91.3628%" y="341" width="0.1919%" height="15" fill="rgb(240,136,2)" fg:x="476" fg:w="1"/><text x="91.6128%" y="351.50"></text></g><g><title>std::shared_ptr&lt;c10::ListType&gt; c10::ListType::create&lt;c10::Type::SingletonOrSharedTypePtr&lt;c10::Type&gt; &gt; (1 samples, 0.19%)</title><rect x="91.5547%" y="341" width="0.1919%" height="15" fill="rgb(239,18,37)" fg:x="477" fg:w="1"/><text x="91.8047%" y="351.50"></text></g><g><title>operator new (1 samples, 0.19%)</title><rect x="91.5547%" y="325" width="0.1919%" height="15" fill="rgb(218,185,22)" fg:x="477" fg:w="1"/><text x="91.8047%" y="335.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="91.5547%" y="309" width="0.1919%" height="15" fill="rgb(225,218,4)" fg:x="477" fg:w="1"/><text x="91.8047%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="91.5547%" y="293" width="0.1919%" height="15" fill="rgb(230,182,32)" fg:x="477" fg:w="1"/><text x="91.8047%" y="303.50"></text></g><g><title>std::vector&lt;c10::IValue, std::allocator&lt;c10::IValue&gt; &gt;::_M_default_append (1 samples, 0.19%)</title><rect x="91.7466%" y="341" width="0.1919%" height="15" fill="rgb(242,56,43)" fg:x="478" fg:w="1"/><text x="91.9966%" y="351.50"></text></g><g><title>torch::ADInplaceOrView::(anonymous namespace)::t (1 samples, 0.19%)</title><rect x="91.9386%" y="341" width="0.1919%" height="15" fill="rgb(233,99,24)" fg:x="479" fg:w="1"/><text x="92.1886%" y="351.50"></text></g><g><title>torch::Library::_parseNameForLib (1 samples, 0.19%)</title><rect x="92.1305%" y="341" width="0.1919%" height="15" fill="rgb(234,209,42)" fg:x="480" fg:w="1"/><text x="92.3805%" y="351.50"></text></g><g><title>std::string::replace (1 samples, 0.19%)</title><rect x="92.1305%" y="325" width="0.1919%" height="15" fill="rgb(227,7,12)" fg:x="480" fg:w="1"/><text x="92.3805%" y="335.50"></text></g><g><title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.19%)</title><rect x="92.1305%" y="309" width="0.1919%" height="15" fill="rgb(245,203,43)" fg:x="480" fg:w="1"/><text x="92.3805%" y="319.50"></text></g><g><title>std::string::_Rep::_M_dispose (1 samples, 0.19%)</title><rect x="92.1305%" y="293" width="0.1919%" height="15" fill="rgb(238,205,33)" fg:x="480" fg:w="1"/><text x="92.3805%" y="303.50"></text></g><g><title>std::string::_Rep::_M_dispose (1 samples, 0.19%)</title><rect x="92.1305%" y="277" width="0.1919%" height="15" fill="rgb(231,56,7)" fg:x="480" fg:w="1"/><text x="92.3805%" y="287.50"></text></g><g><title>cfree (1 samples, 0.19%)</title><rect x="92.1305%" y="261" width="0.1919%" height="15" fill="rgb(244,186,29)" fg:x="480" fg:w="1"/><text x="92.3805%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="92.1305%" y="245" width="0.1919%" height="15" fill="rgb(234,111,31)" fg:x="480" fg:w="1"/><text x="92.3805%" y="255.50"></text></g><g><title>torch::autograd::AutogradMeta::fw_grad (3 samples, 0.58%)</title><rect x="92.3225%" y="341" width="0.5758%" height="15" fill="rgb(241,149,10)" fg:x="481" fg:w="3"/><text x="92.5725%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="92.7063%" y="325" width="0.1919%" height="15" fill="rgb(249,206,44)" fg:x="483" fg:w="1"/><text x="92.9563%" y="335.50"></text></g><g><title>torch::autograd::AutogradMeta::~AutogradMeta (3 samples, 0.58%)</title><rect x="92.8983%" y="341" width="0.5758%" height="15" fill="rgb(251,153,30)" fg:x="484" fg:w="3"/><text x="93.1483%" y="351.50"></text></g><g><title>c10::VariableVersion::VersionCounter::~VersionCounter (1 samples, 0.19%)</title><rect x="94.2418%" y="325" width="0.1919%" height="15" fill="rgb(239,152,38)" fg:x="491" fg:w="1"/><text x="94.4918%" y="335.50"></text></g><g><title>torch::autograd::DifferentiableViewMeta::DifferentiableViewMeta (7 samples, 1.34%)</title><rect x="93.4741%" y="341" width="1.3436%" height="15" fill="rgb(249,139,47)" fg:x="487" fg:w="7"/><text x="93.7241%" y="351.50"></text></g><g><title>cfree (2 samples, 0.38%)</title><rect x="94.4338%" y="325" width="0.3839%" height="15" fill="rgb(244,64,35)" fg:x="492" fg:w="2"/><text x="94.6838%" y="335.50"></text></g><g><title>[libc.so.6] (2 samples, 0.38%)</title><rect x="94.4338%" y="309" width="0.3839%" height="15" fill="rgb(216,46,15)" fg:x="492" fg:w="2"/><text x="94.6838%" y="319.50"></text></g><g><title>torch::autograd::DifferentiableViewMeta::~DifferentiableViewMeta (1 samples, 0.19%)</title><rect x="94.8177%" y="341" width="0.1919%" height="15" fill="rgb(250,74,19)" fg:x="494" fg:w="1"/><text x="95.0677%" y="351.50"></text></g><g><title>torch::autograd::VariableType::(anonymous namespace)::addmm (1 samples, 0.19%)</title><rect x="95.0096%" y="341" width="0.1919%" height="15" fill="rgb(249,42,33)" fg:x="495" fg:w="1"/><text x="95.2596%" y="351.50"></text></g><g><title>torch::autograd::VariableType::(anonymous namespace)::view (2 samples, 0.38%)</title><rect x="95.2015%" y="341" width="0.3839%" height="15" fill="rgb(242,149,17)" fg:x="496" fg:w="2"/><text x="95.4515%" y="351.50"></text></g><g><title>torch::autograd::make_variable_differentiable_view (3 samples, 0.58%)</title><rect x="95.5854%" y="341" width="0.5758%" height="15" fill="rgb(244,29,21)" fg:x="498" fg:w="3"/><text x="95.8354%" y="351.50"></text></g><g><title>operator new (2 samples, 0.38%)</title><rect x="95.7774%" y="325" width="0.3839%" height="15" fill="rgb(220,130,37)" fg:x="499" fg:w="2"/><text x="96.0274%" y="335.50"></text></g><g><title>malloc (2 samples, 0.38%)</title><rect x="95.7774%" y="309" width="0.3839%" height="15" fill="rgb(211,67,2)" fg:x="499" fg:w="2"/><text x="96.0274%" y="319.50"></text></g><g><title>torch::jit::Graph::insertNode (1 samples, 0.19%)</title><rect x="96.1612%" y="341" width="0.1919%" height="15" fill="rgb(235,68,52)" fg:x="501" fg:w="1"/><text x="96.4112%" y="351.50"></text></g><g><title>torch::jit::GraphExecutor::run (1 samples, 0.19%)</title><rect x="96.3532%" y="341" width="0.1919%" height="15" fill="rgb(246,142,3)" fg:x="502" fg:w="1"/><text x="96.6032%" y="351.50"></text></g><g><title>torch::jit::GraphExecutorImplBase::run (2 samples, 0.38%)</title><rect x="96.5451%" y="341" width="0.3839%" height="15" fill="rgb(241,25,7)" fg:x="503" fg:w="2"/><text x="96.7951%" y="351.50"></text></g><g><title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.19%)</title><rect x="96.7370%" y="325" width="0.1919%" height="15" fill="rgb(242,119,39)" fg:x="504" fg:w="1"/><text x="96.9870%" y="335.50"></text></g><g><title>char* std::string::_S_construct&lt;char const*&gt; (1 samples, 0.19%)</title><rect x="96.7370%" y="309" width="0.1919%" height="15" fill="rgb(241,98,45)" fg:x="504" fg:w="1"/><text x="96.9870%" y="319.50"></text></g><g><title>char* std::string::_S_construct_aux&lt;char const*&gt; (1 samples, 0.19%)</title><rect x="96.7370%" y="293" width="0.1919%" height="15" fill="rgb(254,28,30)" fg:x="504" fg:w="1"/><text x="96.9870%" y="303.50"></text></g><g><title>char* std::string::_S_construct&lt;char const*&gt; (1 samples, 0.19%)</title><rect x="96.7370%" y="277" width="0.1919%" height="15" fill="rgb(241,142,54)" fg:x="504" fg:w="1"/><text x="96.9870%" y="287.50"></text></g><g><title>std::string::_Rep::_S_create (1 samples, 0.19%)</title><rect x="96.7370%" y="261" width="0.1919%" height="15" fill="rgb(222,85,15)" fg:x="504" fg:w="1"/><text x="96.9870%" y="271.50"></text></g><g><title>std::__new_allocator&lt;char&gt;::allocate (1 samples, 0.19%)</title><rect x="96.7370%" y="245" width="0.1919%" height="15" fill="rgb(210,85,47)" fg:x="504" fg:w="1"/><text x="96.9870%" y="255.50"></text></g><g><title>operator new (1 samples, 0.19%)</title><rect x="96.7370%" y="229" width="0.1919%" height="15" fill="rgb(224,206,25)" fg:x="504" fg:w="1"/><text x="96.9870%" y="239.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="96.7370%" y="213" width="0.1919%" height="15" fill="rgb(243,201,19)" fg:x="504" fg:w="1"/><text x="96.9870%" y="223.50"></text></g><g><title>torch::jit::GraphFunction::get_executor (1 samples, 0.19%)</title><rect x="96.9290%" y="341" width="0.1919%" height="15" fill="rgb(236,59,4)" fg:x="505" fg:w="1"/><text x="97.1790%" y="351.50"></text></g><g><title>pthread_mutex_unlock (1 samples, 0.19%)</title><rect x="96.9290%" y="325" width="0.1919%" height="15" fill="rgb(254,179,45)" fg:x="505" fg:w="1"/><text x="97.1790%" y="335.50"></text></g><g><title>torch::jit::InterpreterStateImpl::checkAndStartRecordFunction (1 samples, 0.19%)</title><rect x="97.1209%" y="341" width="0.1919%" height="15" fill="rgb(226,14,10)" fg:x="506" fg:w="1"/><text x="97.3709%" y="351.50"></text></g><g><title>torch::jit::MemoryDAG::setWildcards (1 samples, 0.19%)</title><rect x="97.3129%" y="341" width="0.1919%" height="15" fill="rgb(244,27,41)" fg:x="507" fg:w="1"/><text x="97.5629%" y="351.50"></text></g><g><title>operator new (1 samples, 0.19%)</title><rect x="97.3129%" y="325" width="0.1919%" height="15" fill="rgb(235,35,32)" fg:x="507" fg:w="1"/><text x="97.5629%" y="335.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="97.3129%" y="309" width="0.1919%" height="15" fill="rgb(218,68,31)" fg:x="507" fg:w="1"/><text x="97.5629%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="97.3129%" y="293" width="0.1919%" height="15" fill="rgb(207,120,37)" fg:x="507" fg:w="1"/><text x="97.5629%" y="303.50"></text></g><g><title>torch::jit::Module::Module (1 samples, 0.19%)</title><rect x="97.5048%" y="341" width="0.1919%" height="15" fill="rgb(227,98,0)" fg:x="508" fg:w="1"/><text x="97.7548%" y="351.50"></text></g><g><title>operator new (1 samples, 0.19%)</title><rect x="97.5048%" y="325" width="0.1919%" height="15" fill="rgb(207,7,3)" fg:x="508" fg:w="1"/><text x="97.7548%" y="335.50"></text></g><g><title>malloc (1 samples, 0.19%)</title><rect x="97.5048%" y="309" width="0.1919%" height="15" fill="rgb(206,98,19)" fg:x="508" fg:w="1"/><text x="97.7548%" y="319.50"></text></g><g><title>torch::jit::Object::find_method (1 samples, 0.19%)</title><rect x="97.6967%" y="341" width="0.1919%" height="15" fill="rgb(217,5,26)" fg:x="509" fg:w="1"/><text x="97.9467%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="97.6967%" y="325" width="0.1919%" height="15" fill="rgb(235,190,38)" fg:x="509" fg:w="1"/><text x="97.9467%" y="335.50"></text></g><g><title>torch::jit::SharedParserData::match (1 samples, 0.19%)</title><rect x="97.8887%" y="341" width="0.1919%" height="15" fill="rgb(247,86,24)" fg:x="510" fg:w="1"/><text x="98.1387%" y="351.50"></text></g><g><title>[libc.so.6] (1 samples, 0.19%)</title><rect x="97.8887%" y="325" width="0.1919%" height="15" fill="rgb(205,101,16)" fg:x="510" fg:w="1"/><text x="98.1387%" y="335.50"></text></g><g><title>torch::jit::Token::text (1 samples, 0.19%)</title><rect x="98.0806%" y="341" width="0.1919%" height="15" fill="rgb(246,168,33)" fg:x="511" fg:w="1"/><text x="98.3306%" y="351.50"></text></g><g><title>torch::jit::Value::setDebugName (1 samples, 0.19%)</title><rect x="98.2726%" y="341" width="0.1919%" height="15" fill="rgb(231,114,1)" fg:x="512" fg:w="1"/><text x="98.5226%" y="351.50"></text></g><g><title>std::basic_stringbuf&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::str (1 samples, 0.19%)</title><rect x="98.2726%" y="325" width="0.1919%" height="15" fill="rgb(207,184,53)" fg:x="512" fg:w="1"/><text x="98.5226%" y="335.50"></text></g><g><title>std::string&amp; std::string::assign&lt;char*&gt; (1 samples, 0.19%)</title><rect x="98.2726%" y="309" width="0.1919%" height="15" fill="rgb(224,95,51)" fg:x="512" fg:w="1"/><text x="98.5226%" y="319.50"></text></g><g><title>std::string::replace (1 samples, 0.19%)</title><rect x="98.2726%" y="293" width="0.1919%" height="15" fill="rgb(212,188,45)" fg:x="512" fg:w="1"/><text x="98.5226%" y="303.50"></text></g><g><title>std::string::replace (1 samples, 0.19%)</title><rect x="98.2726%" y="277" width="0.1919%" height="15" fill="rgb(223,154,38)" fg:x="512" fg:w="1"/><text x="98.5226%" y="287.50"></text></g><g><title>std::string::_M_replace_safe (1 samples, 0.19%)</title><rect x="98.2726%" y="261" width="0.1919%" height="15" fill="rgb(251,22,52)" fg:x="512" fg:w="1"/><text x="98.5226%" y="271.50"></text></g><g><title>std::string::_M_mutate (1 samples, 0.19%)</title><rect x="98.2726%" y="245" width="0.1919%" height="15" fill="rgb(229,209,22)" fg:x="512" fg:w="1"/><text x="98.5226%" y="255.50"></text></g><g><title>std::string::_Rep::_S_create (1 samples, 0.19%)</title><rect x="98.2726%" y="229" width="0.1919%" height="15" fill="rgb(234,138,34)" fg:x="512" fg:w="1"/><text x="98.5226%" y="239.50"></text></g><g><title>torch::jit::loadModule (1 samples, 0.19%)</title><rect x="98.4645%" y="341" width="0.1919%" height="15" fill="rgb(212,95,11)" fg:x="513" fg:w="1"/><text x="98.7145%" y="351.50"></text></g><g><title>std::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.19%)</title><rect x="98.4645%" y="325" width="0.1919%" height="15" fill="rgb(240,179,47)" fg:x="513" fg:w="1"/><text x="98.7145%" y="335.50"></text></g><g><title>std::string::_Rep::_M_grab (1 samples, 0.19%)</title><rect x="98.4645%" y="309" width="0.1919%" height="15" fill="rgb(240,163,11)" fg:x="513" fg:w="1"/><text x="98.7145%" y="319.50"></text></g><g><title>torch::jit::tryMatchArgument (1 samples, 0.19%)</title><rect x="98.6564%" y="341" width="0.1919%" height="15" fill="rgb(236,37,12)" fg:x="514" fg:w="1"/><text x="98.9064%" y="351.50"></text></g><g><title>std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release_last_use_cold (1 samples, 0.19%)</title><rect x="98.6564%" y="325" width="0.1919%" height="15" fill="rgb(232,164,16)" fg:x="514" fg:w="1"/><text x="98.9064%" y="335.50"></text></g><g><title>operator delete (1 samples, 0.19%)</title><rect x="98.6564%" y="309" width="0.1919%" height="15" fill="rgb(244,205,15)" fg:x="514" fg:w="1"/><text x="98.9064%" y="319.50"></text></g><g><title>void at::native::setStrided&lt;long&gt; (1 samples, 0.19%)</title><rect x="98.8484%" y="341" width="0.1919%" height="15" fill="rgb(223,117,47)" fg:x="515" fg:w="1"/><text x="99.0984%" y="351.50"></text></g><g><title>void c10::FunctionSchema::checkAndNormalizeInputs&lt;c10::Type&gt; (2 samples, 0.38%)</title><rect x="99.0403%" y="341" width="0.3839%" height="15" fill="rgb(244,107,35)" fg:x="516" fg:w="2"/><text x="99.2903%" y="351.50"></text></g><g><title>void c10::function_ref&lt;void (char**, long const*, long, long)&gt;::callback_fn&lt;at::native::AVX2::VectorizedLoop2d&lt;at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&amp;)::{lambda()#4}::operator()() const::{lambda()#14}::operator()() const::{lambda(float)#1}, at::native::AVX2::direct_copy_kernel(at::TensorIteratorBase&amp;)::{lambda()#4}::operator()() const::{lambda()#14}::operator()() const::{lambda(at::vec::AVX2::Vectorized&lt;float&gt;)#2}&gt; &gt; (2 samples, 0.38%)</title><rect x="99.4242%" y="341" width="0.3839%" height="15" fill="rgb(205,140,8)" fg:x="518" fg:w="2"/><text x="99.6742%" y="351.50"></text></g><g><title>all (521 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(228,84,46)" fg:x="0" fg:w="521"/><text x="0.2500%" y="383.50"></text></g><g><title>cpp_part_exe (521 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="521"/><text x="0.2500%" y="367.50">cpp_part_exe</text></g><g><title>void c10::function_ref&lt;void (char**, long const*, long, long)&gt;::callback_fn&lt;at::native::AVX2::VectorizedLoop2d&lt;at::native::AVX2::sigmoid_kernel(at::TensorIteratorBase&amp;)::{lambda()#2}::operator()() const::{lambda()#2}::operator()() const::{lambda(float)#1}, at::native::AVX2::sigmoid_kernel(at::TensorIteratorBase&amp;)::{lambda()#2}::operator()() const::{lambda()#2}::operator()() const::{lambda(at::vec::AVX2::Vectorized&lt;float&gt;)#2}&gt; &gt; (1 samples, 0.19%)</title><rect x="99.8081%" y="341" width="0.1919%" height="15" fill="rgb(206,112,54)" fg:x="520" fg:w="1"/><text x="100.0581%" y="351.50"></text></g><g><title>expf (1 samples, 0.19%)</title><rect x="99.8081%" y="325" width="0.1919%" height="15" fill="rgb(216,84,49)" fg:x="520" fg:w="1"/><text x="100.0581%" y="335.50"></text></g></svg></svg>